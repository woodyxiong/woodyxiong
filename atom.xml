<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魁爷的黑作坊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.gfkui.com/"/>
  <updated>2020-11-22T11:07:11.676Z</updated>
  <id>https://blog.gfkui.com/</id>
  
  <author>
    <name>WoodyXiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中国官员级别</title>
    <link href="https://blog.gfkui.com/2020/11/22/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E4%B8%AD%E5%9B%BD%E5%AE%98%E5%91%98%E7%BA%A7%E5%88%AB/"/>
    <id>https://blog.gfkui.com/2020/11/22/奇怪的知识/中国官员级别/</id>
    <published>2020-11-22T09:41:04.000Z</published>
    <updated>2020-11-22T11:07:11.676Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>中国跟西方国家的制度不一样，是存在<strong>党职</strong>和<strong>公职</strong>两个概念，一个人可能同时担任两种职务。</p><h1 id="党职"><a href="#党职" class="headerlink" title="党职"></a>党职</h1><p>每隔五年都要举行一次共产党代表大会，最近一次是2017的<strong>十九大</strong>，这些人除了要在全国人民代表大会中被选做国家的公职人员外，还要担任党内其他职务，比如中纪委数据、政法委书记、中央宣传部长、统战部长等等等</p><h3 id="具体党职排行"><a href="#具体党职排行" class="headerlink" title="具体党职排行"></a>具体党职排行</h3><blockquote><p>中央政治局常务委员会</p></blockquote><ol><li>中共中央总书记 <em>正国级</em></li><li>政治局常委7人（包括总书记）（中央委员） <em>正国级</em></li><li>政治局委员18人（中央委员）<em>副国级</em></li><li>其他中央委员179人（包括省委书记） <em>真正的级别还是要看党政职务，一般是正副省部级</em></li><li>中央候补委员172人</li></ol><blockquote><p>副省部级以上+正厅局级是高级干部</p></blockquote><blockquote><p>中央书记处书记</p></blockquote><p>政治局委员6人+中央委员1人</p><blockquote><p>中共中央军委（党职）=== 国家中央军委（军职）</p></blockquote><blockquote><p>省委常委</p></blockquote><ol><li>省委书记</li><li>省委副书记：省长、重要市市委书记</li><li>其他常委：统战部长、总工会主席、省委书记、组织部长、政法委书记、省军区司令员、省委秘书长、重要市市委书记、宣传部长</li></ol><blockquote><p>市委常委</p></blockquote><ol><li>市委书记一般兼任是人大委员会主任</li><li>市委副书记、市长</li><li>常务副市长</li><li>市纪委书记、监委会书记</li><li>市委组织部长</li><li>市委宣传部长</li><li>市委政法委书记</li><li>市委秘书长</li><li>市军区或司令员</li></ol><h1 id="公职"><a href="#公职" class="headerlink" title="公职"></a>公职</h1><blockquote><p>一府两院</p></blockquote><ul><li>中央人民政府（国务院）（正国级）</li><li>最高人民法院（副国级）</li><li>最高人民检察院 （副国级）</li></ul><p>每隔5年选举一次，一般是在党代会的第二年三月的两会来确定。</p><h3 id="具体公职排行"><a href="#具体公职排行" class="headerlink" title="具体公职排行"></a>具体公职排行</h3><ol><li>正国级：国务院主席，国务院总理，全国人民代表大会常务委员会委员长，全国政协主席，全国军事委员会委员长 <strong>正国级的政治局常委担任</strong></li><li>副国级：以上提到的副手+最高人民法院院长、最高人民检察院院长、国家监察委主任、广东新疆省委书记、四个直辖市市委书记 <strong>25位政治局委员和部分中央委员</strong></li><li>正省部级：教育部、商务部、民政部、央行行长、审计署的审计长、证监会，地方省四套班子（省委书记、省长、省人大委员长、省政协主席）</li><li>副省部级：国家统计局、烟草局、邮政局等，14个计划单列市的的四套班子</li><li>正厅局级：地级市（省会和大城市）的四套班子</li><li>正处级：县级市的四套班子</li><li>香港和澳门的权力更大，体制不同</li></ol><h1 id="军职"><a href="#军职" class="headerlink" title="军职"></a>军职</h1><p>现在的领导人习近平是中共中央总书记、国家主席、中央军委主席，即三位一体职位。最关键的官是中央军委主席，从前有的官位是分开的，但是只有中央军委主席都是中国五代领导人都牢牢抓住的</p><blockquote><p>军衔</p></blockquote><ul><li>将官<ul><li>上将（橄榄枝+3星）</li><li>中将（橄榄枝+2星）</li><li>少将（橄榄枝+1星）</li></ul></li><li>校官<ul><li>大校（两杠四星）</li><li>上校（两杠三星）</li><li>中校（两杠二星）</li><li>少校（两杠一星）</li></ul></li><li>尉官<ul><li>上尉（一杠三星）</li><li>中尉（一杠二星）</li><li>少尉（一杠一星）</li></ul></li><li>士官<ul><li>一级</li><li>…</li><li>七级</li></ul></li><li>义务兵<ul><li>一级</li><li>二级</li></ul></li></ul><blockquote><p>军级</p></blockquote><p>各有正副两级</p><ol><li>战区级</li><li>军级</li><li>师级</li><li>团级</li><li>营级</li><li>连级</li><li>排级</li></ol><blockquote><p>战区级单位（中央军委）（包括武警部队）</p></blockquote><ul><li>7个部<ul><li>军委办公厅</li><li>军委联合参谋部</li><li>军委政治工作部</li><li>军委后勤保障部</li><li>军委装备发展部</li><li>军委训练管理部</li><li>军委国防动员部</li></ul></li><li>3个委员会<ul><li>军委纪委</li><li>军委政法委</li><li>军委科技委</li></ul></li><li>5个直属机构<ul><li>军委战略规划办公室</li><li>军委改革和编制办公室</li><li>军委国际军事合作办公室</li><li>军委审计署</li><li>军委机关事务管理总局</li></ul></li></ul><blockquote><p>军种和战区</p></blockquote><ul><li>海军</li><li>陆军</li><li>空军</li><li>火箭军</li><li><p>战略支援部队</p></li><li><p>东南西北中五大战区</p></li></ul><blockquote><p>如何领导</p></blockquote><p><img src="https://tencentcdn.gfkui.cn/20/11/%E4%B8%AD%E5%A4%AE%E5%86%9B%E5%A7%94%E5%A6%82%E4%BD%95%E9%A2%86%E5%AF%BC%E9%9B%86%E5%9B%A2%E5%86%9B.jpg" alt="中央军委如何领导集团军"></p><p>行政领导走陆军司令部，而作战指挥有战区司令部领导，这就是<strong>军委管总，战区主战，军种主建</strong></p><p>在地方上，省军区管文（招兵、退伍安置、地方部队建设、预备役等），集团军管武，都是正军级单位 。</p><p>地方的军分区为正师级单位，除此之外，辽宁舰也是正师级单位。</p><blockquote><p>新疆生产建设兵团</p></blockquote><p>党政军企四位一体的特殊社会组织，受中央政府和新疆维吾尔自治区双重领导，切位国务院计划单列省级单位，享有省级权限。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="奇怪的知识" scheme="https://blog.gfkui.com/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="国际" scheme="https://blog.gfkui.com/tags/%E5%9B%BD%E9%99%85/"/>
    
      <category term="中国" scheme="https://blog.gfkui.com/tags/%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="行政级别" scheme="https://blog.gfkui.com/tags/%E8%A1%8C%E6%94%BF%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>全世界如何选出最高领导人</title>
    <link href="https://blog.gfkui.com/2020/11/22/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E5%85%A8%E4%B8%96%E7%95%8C%E5%A6%82%E4%BD%95%E9%80%89%E5%87%BA%E6%9C%80%E9%AB%98%E9%A2%86%E5%AF%BC%E4%BA%BA/"/>
    <id>https://blog.gfkui.com/2020/11/22/奇怪的知识/全世界如何选出最高领导人/</id>
    <published>2020-11-22T09:39:49.000Z</published>
    <updated>2020-11-22T11:07:19.036Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="中国"><a href="#中国" class="headerlink" title="中国"></a>中国</h1><blockquote><p>全国人大代表会</p></blockquote><p>全国人民代表大会选出主席、副主席、国务院总理、全国人大常委会委员长、各个部的部长</p><p>本次全国人大代表2980名，其中175人可以进入到全国人大常委会，15人进入委员长会议。人大代表中还有858名的民主党派和无党派人士。</p><blockquote><p>级别</p></blockquote><ol><li>全国人大（间接选举）</li><li>省级人大（间接选举）</li><li>市级人大（间接选举）</li><li>县级人大（县、不设区的市、直辖区，包括上海的xx区）（直接选举）</li><li>乡镇级人大（直接选举）</li></ol><p>备注：每个层级的人大职责不同，例如江西省的人大选出的代表江西的全国人民代表，他是可以去全国各地进行调研和收集名民意的。</p><blockquote><p>间接选举</p></blockquote><p>间接选举的时候，所有选票过半的数目才能当选，而不是出席代表的票数过半；如果没有过半，则下个月再投。</p><p>等额选举，只有一个人出来选，几乎就是出来选就当选，，黑人问号？？？</p><blockquote><p>直接选举</p></blockquote><p>除直辖市以外，市分为<strong>设区的市</strong>和<strong>不设区的市</strong>（ 与县级市概念类似，直接选举）</p><blockquote><p><a href="http://www.npc.gov.cn/zgrdw/huiyi/lfzt/xjfxzaca/2000-12/07/content_1522817.htm" target="_blank" rel="noopener">如何当候选人</a></p></blockquote><p>政党或人民团体推荐提名或是有选举权的居民10人以上可以提名，看起来很简单。</p><blockquote><p>附一府两院中，院的级别</p></blockquote><ol><li>最高人民法院</li><li>广东省高级人民法院</li><li>深证市中级人民法院</li><li><p>深圳市罗湖区人民法院</p></li><li><p>最高人民检察院</p></li><li>广东省人民检察院</li><li>深圳市人民检察院</li><li>深圳市罗湖区人民检察院</li></ol><h1 id="台湾地区"><a href="#台湾地区" class="headerlink" title="台湾地区"></a>台湾地区</h1><p>每6年选举一次，最近一次是2020年1月11日选举出台湾正副总统和立法委员（113人）</p><blockquote><p>如何选举</p></blockquote><p>真正的一人一票（真的简单粗暴）</p><p>2020年各参选阵营参选人<br><img src="https://blog-cdn-1251774364.cos.ap-chengdu.myqcloud.com/20/06/04/%E5%8F%82%E9%80%89%E4%BA%BA.jpg" alt="各参选阵营参选人"></p><p>2020年各参选阵营的台海两岸政策主张<br><img src="https://blog-cdn-1251774364.cos.ap-chengdu.myqcloud.com/20/06/04/%E5%90%84%E4%B8%AA%E9%98%B5%E8%90%A5%E7%9A%84%E4%B8%BB%E5%BC%A0.jpg" alt="台海两岸政策主张"></p><h1 id="美国"><a href="#美国" class="headerlink" title="美国"></a>美国</h1><p>每5年选举一次</p><blockquote><p>如何选举</p></blockquote><p>选举人团制度，每个州按照人数的多少有不同数量的选举人票，这个州的结果由选举人票决定，而这个州如果赢了，则可以赢者全拿票。投票结束后，只要候选人拿到超过总选举人票数538张的一半，就获胜。</p><p>特点：</p><ol><li>人口多的州称为票仓，赢者全拿</li><li>历史上选举人票有投错，哈哈哈</li><li>有可能总票数少的，也能获胜，例如小布什</li><li>候选人拿到票仓后，会花精力给<strong>摇摆州</strong>，甚至推出有利的政策</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="奇怪的知识" scheme="https://blog.gfkui.com/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="历史" scheme="https://blog.gfkui.com/tags/%E5%8E%86%E5%8F%B2/"/>
    
      <category term="国际" scheme="https://blog.gfkui.com/tags/%E5%9B%BD%E9%99%85/"/>
    
      <category term="中国" scheme="https://blog.gfkui.com/tags/%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="行政级别" scheme="https://blog.gfkui.com/tags/%E8%A1%8C%E6%94%BF%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>中医药入门</title>
    <link href="https://blog.gfkui.com/2020/11/22/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E4%B8%AD%E5%8C%BB%E8%8D%AF%E5%85%A5%E9%97%A8/"/>
    <id>https://blog.gfkui.com/2020/11/22/奇怪的知识/中医药入门/</id>
    <published>2020-11-22T09:36:15.000Z</published>
    <updated>2020-11-22T11:07:50.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="阴阳思想"><a href="#阴阳思想" class="headerlink" title="阴阳思想"></a>阴阳思想</h1><blockquote><p>阴阳鱼</p></blockquote><p><img src="https://tencentcdn.gfkui.cn/20/06/10/%E9%98%B4%E9%98%B3%E9%B1%BC.png" width="300" height="300" align="middle"></p><blockquote><p>核心思想</p></blockquote><ul><li>阴阳可分性 <ul><li>任何事物都可以分阴阳</li><li>阴中有阳，阳中有阴</li></ul></li><li>阴阳对立性<ul><li>任何事物都存在阴阳两个方面</li><li>相互对立的双方，大多存在互相制约的特性</li></ul></li><li>阴阳互根互用<ul><li>阴阳相互依存</li><li>上为阳，下为阴；左为阳，右为阴；没有上，就没有下</li></ul></li><li>阴阳转化<ul><li>一年四季的阴阳，此消彼长</li></ul></li></ul><blockquote><p>《素问·金奎真言论》</p></blockquote><p>阴中有阳，阳中有阴。平旦至日中，天之阳， 阳中之阳；日中至黄昏，天之阳， 阳中之阴；合夜至鸡鸣，天之阴，阴中之阴； 鸡鸣至平旦，天之阴，阴中之阳。</p><p>故人亦应之，夫言人之阴阳，则外为阳，内为阴，言人身之阴阳，则背为阳，腹为阴。</p><p>言人身之脏腑之阴阳，则脏者为阴， 腑者为阳。相应的，肝、心、脾、肺、肾，五脏皆为阴， 胆、胃、大肠、小肠、膀胱、三焦六腑皆为阳。 故背为阳，那么阳中之阳是什么？是心也。 那么背为阳，阳中之阴呢是肺也， 而腹为阴，阴中之阴肾也。 腹为阴，阴中之阳是肝也，那腹为阴，还有 阴中之至阴，脾也。这里面指的是人体的脏腑的阴阳划分。 此皆阴阳表里，内外雌雄，相输应也， 故以应天之阴阳。</p><p>故积阳为天，积阴为地，阴静阳燥，阳生阴长， 阳化气，阴成形，寒极生热，热极生寒，寒气生浊，热气生清，清气在下，则生飧泄，浊气在上，则生嗔胀。此阴阳反作， 病之逆从也。故清阳为天，浊阴为地， 地气上为云，天气下为雨，那么雨出地气，云出天气。 故清阳出上窍，浊阴出下窍；清阳发腠理， 浊阴走五脏；清阳实四肢，浊阴归六腑。 那么阴胜则阳病，阳胜则阴病。 那么阳胜则热，阴胜则寒。重寒则热，重热则寒。 寒伤形，热伤气。气伤痛，形伤肿。 故先痛而后肿者，气伤形也，先肿而后痛者，形伤气也。</p><p>天有四时五行，以生长收藏， 以生寒暑燥湿风。人有五脏化五气，以生喜怒悲忧恐。 故喜怒伤气，寒暑伤形。 暴怒伤阴，暴喜伤阳。故重阴必阳，重阳必阴。 故曰：冬伤于寒，春必温病；春伤于风，夏生飧泄； 夏伤于暑，秋必痎疟； 秋伤于湿，冬生咳嗽。</p><h1 id="五行学说"><a href="#五行学说" class="headerlink" title="五行学说"></a>五行学说</h1><p><img src="https://tencentcdn.gfkui.cn/20/06/10/%E4%BA%94%E8%A1%8C%E7%94%9F%E5%85%8B%E5%9B%BE.jpg" alt="五行生克图"></p><ul><li>正常关系：相生与相克</li><li>异常关系：相乘与相侮<ul><li>克得太过</li><li>反被克</li></ul></li></ul><h3 id="五行与其他现象的"><a href="#五行与其他现象的" class="headerlink" title="五行与其他现象的"></a>五行与其他现象的</h3><table><thead><tr><th>五行</th><th>四季</th><th>方位</th><th>官员</th><th>寓意</th></tr></thead><tbody><tr><td>木</td><td>春</td><td>东</td><td>司农-农业</td><td>曲直，具有生发、条达，反映事物曲直向上的过程</td><td></td></tr><tr><td>火</td><td>夏</td><td>南</td><td>司马-军队</td><td>炎上，具有火热，向上、发光、温暖的特性</td><td></td></tr><tr><td>土</td><td>长夏</td><td>中</td><td>司营-君主</td><td>稼墙，具有生化万物、长养、化育的特性</td><td></td></tr><tr><td>金</td><td>秋</td><td>西</td><td>司徒-刑法</td><td>从革，具有清净、收杀、变革之意</td><td></td></tr><tr><td>水</td><td>冬</td><td>北</td><td>司空-建设</td><td>润下，具有滋润万物、寒冷向下的特性</td><td></td></tr></tbody></table><p><img src="https://blog-cdn-1251774364.cos.ap-chengdu.myqcloud.com/20/06/10/%E4%B8%AD%E5%8C%BB%E4%BA%94%E8%A1%8C.png" alt="最全的图"></p><h3 id="五行与五脏六腑"><a href="#五行与五脏六腑" class="headerlink" title="五行与五脏六腑"></a>五行与五脏六腑</h3><table><thead><tr><th>五行</th><th>五脏</th></tr></thead><tbody><tr><td>木</td><td>肝</td><td></td></tr><tr><td>火</td><td>心</td><td></td></tr><tr><td>土</td><td>脾</td><td></td></tr><tr><td>金</td><td>肺</td><td></td></tr><tr><td>水</td><td>肾</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="奇怪的知识" scheme="https://blog.gfkui.com/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="中医" scheme="https://blog.gfkui.com/tags/%E4%B8%AD%E5%8C%BB/"/>
    
      <category term="中医药" scheme="https://blog.gfkui.com/tags/%E4%B8%AD%E5%8C%BB%E8%8D%AF/"/>
    
      <category term="中华文化" scheme="https://blog.gfkui.com/tags/%E4%B8%AD%E5%8D%8E%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>中东拳王争霸赛(中东战争)</title>
    <link href="https://blog.gfkui.com/2020/11/22/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E4%B8%AD%E4%B8%9C%E6%8B%B3%E7%8E%8B%E4%BA%89%E9%9C%B8%E8%B5%9B-%E4%B8%AD%E4%B8%9C%E6%88%98%E4%BA%89/"/>
    <id>https://blog.gfkui.com/2020/11/22/奇怪的知识/中东拳王争霸赛-中东战争/</id>
    <published>2020-11-22T09:09:47.000Z</published>
    <updated>2020-11-22T11:06:52.695Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h4 id="基督教·旧约圣经"><a href="#基督教·旧约圣经" class="headerlink" title="基督教·旧约圣经"></a>基督教·旧约圣经</h4><p>上帝和亚伯拉罕立约，赐给他和他的后裔一块土地，作为他们的家园和领土。</p><p>亚伯拉罕的两个儿子，分成两拨人，阿拉伯人和犹太人这两拨人在巴勒斯坦的土地在1948-1982爆发了5次<strong>中东战争</strong>。</p><h4 id="犹太人回到巴勒斯坦"><a href="#犹太人回到巴勒斯坦" class="headerlink" title="犹太人回到巴勒斯坦"></a>犹太人回到巴勒斯坦</h4><p>公元前11世纪，犹太人以耶路撒冷为都城，建立了以色列王国，但是后面国家被灭，犹太人就散落到世界各地。</p><p>犹太人的民族性强，他们坚持信仰，很少与外族融合，他们重视教育，善于经商，在许多国家都有一定的地位。</p><p>二战结束后，收到欧洲和中东迫害的犹太人在巴勒斯坦的阿拉伯人购买土地，兴建犹太居民点，打算扎根于此。</p><p>美苏都想扶持以色列建国，意在中东削弱阿拉伯人独霸中东，同时瓦解英国在中东的殖民体系。</p><p>1947.11.29 联合国大会决议将巴勒斯坦一分为二，分成阿拉伯地区和犹太人地区。</p><p>1948.5.14 以色列宣布建国，阿拉伯国家在第二天对以色列宣战。</p><h2 id="第一次中东战争（美苏帮助以色列立国）"><a href="#第一次中东战争（美苏帮助以色列立国）" class="headerlink" title="第一次中东战争（美苏帮助以色列立国）"></a>第一次中东战争（美苏帮助以色列立国）</h2><ol><li>以色列的所有邻国都为阿拉伯人，共同集结了4w军队，组成联军进攻以色列。</li><li>三天时间阿拉伯军队打到耶路撒冷，在此处打了10天巷战。</li><li>联合国的美苏为了偏袒以色列，要求停火4周。</li><li>4周内以色列筹集巨额资金、人力、物力，军力以及人数反超阿拉伯联军。</li><li>战局逆转，以色列稳固下来，以色列打赢所有阿拉伯国家。</li></ol><h2 id="第二次中东战争（美苏打击英法殖民体系）"><a href="#第二次中东战争（美苏打击英法殖民体系）" class="headerlink" title="第二次中东战争（美苏打击英法殖民体系）"></a>第二次中东战争（美苏打击英法殖民体系）</h2><p>1955年，埃及与苏联要好，赶走英国的殖民，并决定将之前英法控制的苏伊士运河国有化。</p><p>苏伊士运河平时能尝到巨额贸易收入，战时可用于运送军火，是兵家必争之地。</p><p>英法以色列密谋以色列出兵，然后英法出面调停，使得埃及和以色列各退10公里，然后英法趁机占据苏伊士运河。</p><ol><li>以色列出兵后，英法出面调停，埃及拒绝退兵，英法直接出兵进攻埃及，遭到舆论谴责。</li><li>美苏抓到这个机会向英法施压，美国扬言切断英国石油供应，苏联扬言使用核武器。</li><li>英法以色列退兵，埃及稳固国土收回苏伊士运河，美苏正式成为世界两极。</li></ol><h2 id="第三次中东战争（阿拉伯优势不复存在）"><a href="#第三次中东战争（阿拉伯优势不复存在）" class="headerlink" title="第三次中东战争（阿拉伯优势不复存在）"></a>第三次中东战争（阿拉伯优势不复存在）</h2><p>1967年，美苏全面对抗，北约支持犹太人，苏联支持阿拉伯人。阿拉伯因为有苏联撑腰，准备一举摧毁以色列解决中东问题。</p><ol><li>阿拉伯国家向以色列宣战</li><li>以色列空军对埃及发动偷袭，倾巢出动，全灭埃及空军。</li><li>以色列继续进攻约旦和叙利亚，两天内瘫痪其空军，6天改变中东局面。</li></ol><h2 id="第四次中东战争（阿拉伯国家全面落入下风）"><a href="#第四次中东战争（阿拉伯国家全面落入下风）" class="headerlink" title="第四次中东战争（阿拉伯国家全面落入下风）"></a>第四次中东战争（阿拉伯国家全面落入下风）</h2><ol><li>1973.10.6 埃及陆军突然袭击以色列。</li><li>进入战略相持。</li><li>埃及在战术上连连退败，后被联合国叫停，美苏达成协议，罢兵言和。</li><li>埃及与以色列建交。</li></ol><h2 id="第五次中东战争（以色列欺负阿拉伯小国）"><a href="#第五次中东战争（以色列欺负阿拉伯小国）" class="headerlink" title="第五次中东战争（以色列欺负阿拉伯小国）"></a>第五次中东战争（以色列欺负阿拉伯小国）</h2><p>1982.6.6 以色列入侵黎巴嫩</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="奇怪的知识" scheme="https://blog.gfkui.com/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="历史" scheme="https://blog.gfkui.com/tags/%E5%8E%86%E5%8F%B2/"/>
    
      <category term="中东战争" scheme="https://blog.gfkui.com/tags/%E4%B8%AD%E4%B8%9C%E6%88%98%E4%BA%89/"/>
    
      <category term="国际" scheme="https://blog.gfkui.com/tags/%E5%9B%BD%E9%99%85/"/>
    
      <category term="美国" scheme="https://blog.gfkui.com/tags/%E7%BE%8E%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的explain用法</title>
    <link href="https://blog.gfkui.com/2020/11/22/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/MySQL%E7%9A%84explain%E7%94%A8%E6%B3%95/"/>
    <id>https://blog.gfkui.com/2020/11/22/研发日志/MySQL的explain用法/</id>
    <published>2020-11-22T08:51:28.000Z</published>
    <updated>2020-11-22T11:05:47.057Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="explain示例1"><a href="#explain示例1" class="headerlink" title="explain示例1"></a>explain示例1</h3><pre><code>explain select u_user.id, u_user.name, u_user.id, u_user_dep.*from u_user       left join u_user_dep on u_user.id = u_user_dep.user_idwhere u_user.name like &#39;%test%&#39;;</code></pre><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>u_user</td><td>index</td><td>NULL</td><td>name</td><td>386</td><td>NULL</td><td>3752</td><td>Using where; Using index</td></tr><tr><td>1</td><td>SIMPLE</td><td>u_user_dep</td><td>ref</td><td>PRIMARY</td><td>PRIMARY</td><td>4</td><td>portal.u_user.id</td><td>1</td><td>NULL</td></tr></tbody></table><h3 id="explain示例2"><a href="#explain示例2" class="headerlink" title="explain示例2"></a>explain示例2</h3><pre><code>explain SELECT id,url,insert_time FROM d_purge WHERE domain_id in(SELECT id FROM d_domain WHERE user_id =1341) AND d_purge.insert_time &gt; &#39;2019-04-01 00:00:00&#39; AND id &gt; 661695994 LIMIT 10000</code></pre><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>d_purge</td><td>range</td><td>PRIMARY,domain_id,domain_id_type_insert_time_status,domain_id_status</td><td>PRIMARY</td><td>4</td><td>NULL</td><td>1</td><td>Using where</td></tr><tr><td>1</td><td>SIMPLE</td><td>d_domain</td><td>eq_ref</td><td>PRIMARY,user_id,user_id_status</td><td>PRIMARY</td><td>4</td><td>d_purge.domain_id</td><td>1</td><td>Using where</td></tr></tbody></table><h3 id="explain的各个属性含义"><a href="#explain的各个属性含义" class="headerlink" title="explain的各个属性含义"></a>explain的各个属性含义</h3><table><thead><tr><th>名称</th><th>含义</th><th>可能的值</th></tr></thead><tbody><tr><td>id</td><td>查询的序列号</td><td></td></tr><tr><td>select_type</td><td>查询的类型</td><td>普通查询、联合查询、子查询</td></tr><tr><td>table</td><td>查询表名</td><td></td></tr><tr><td>type</td><td>联合查询使用的类型</td><td></td></tr><tr><td>possible_key</td><td>可能用到的查询</td><td>NULL：没有索引，需要查看where子句是否有索引</td></tr><tr><td>key</td><td>显示MySQL决定用哪个索引</td><td>如果没有索引被选择，则显示NULL</td></tr><tr><td>key_len</td><td>显示MySQL决定使用的键长度。<br>这个值可以反映出一个多重主键里MySQL实际用了哪部分</td><td></td></tr><tr><td>ref</td><td>显示哪个字段或常数与key一起被使用</td><td></td></tr><tr><td>rows</td><td>需要遍历多少行才能查到数据</td><td></td></tr><tr><td>extra</td><td>检索方式</td><td>Only index 使用索引<br>where used 使用了where,但是索引还不够<br>impossible-where 不可能存在的数据<br>Using filesort<br>using temporary 使用临时表<br>select tables optimized way 使用聚合函数</td></tr></tbody></table><p>一般来说，type显示的访问类型是比较重要的指标，以下表格是从好到坏依次排列。保证查询至少达到range级，最好能达到ref级</p><table><thead><tr><th>值</th><th>含义</th><th>级别</th></tr></thead><tbody><tr><td>system</td><td>系统表</td><td>非常好</td></tr><tr><td>const</td><td>读常量</td><td>非常好</td></tr><tr><td>eq_ref</td><td>最多匹配一条记录，一般是通过主键访问</td><td>非常好</td></tr><tr><td>ref</td><td>被驱动表索引引用</td><td>最好能到这里</td></tr><tr><td>fulltext</td><td>全文索引检索</td><td>还可以</td></tr><tr><td>ref_or_null</td><td>带空值的索引查询</td><td>还可以</td></tr><tr><td>index_merge</td><td>合并索引结果集</td><td>还可以</td></tr><tr><td>unique_subquery</td><td>子查询中返回的字段是唯一的组合或索引</td><td>还可以</td></tr><tr><td>index_subquery</td><td>子查询返回的是索引，但非主键</td><td>还可以</td></tr><tr><td>range</td><td>索引范围扫描</td><td>最低限度</td></tr><tr><td>index</td><td>全索引扫描</td><td>一般不能忍</td></tr><tr><td>ALL</td><td>全表扫描</td><td>坚决不能忍</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="研发日志" scheme="https://blog.gfkui.com/categories/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="MySQL" scheme="https://blog.gfkui.com/tags/MySQL/"/>
    
      <category term="面试" scheme="https://blog.gfkui.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL建库建表索引知识点汇总</title>
    <link href="https://blog.gfkui.com/2020/11/22/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/MySQL%E5%BB%BA%E5%BA%93%E5%BB%BA%E8%A1%A8%E7%B4%A2%E5%BC%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>https://blog.gfkui.com/2020/11/22/研发日志/MySQL建库建表索引知识点汇总/</id>
    <published>2020-11-22T08:30:07.000Z</published>
    <updated>2020-11-22T11:06:02.048Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL建库建表索引知识点汇总"><a href="#MySQL建库建表索引知识点汇总" class="headerlink" title="MySQL建库建表索引知识点汇总"></a>MySQL建库建表索引知识点汇总</h1><ul><li><a href="https://www.imooc.com/learn/194" target="_blank" rel="noopener">mysql优化教程</a></li><li><a href="https://blog.csdn.net/chenchaofuck1/article/details/51385261" target="_blank" rel="noopener">MyISAM与InnoDB两个存储引擎的索引实现方式</a></li><li>一般尽量选择<code>InnoDB</code><ul><li><a href="http://www.runoob.com/mysql/mysql-transaction.html" target="_blank" rel="noopener">有事务的操作</a></li><li>InnoDb是行锁，而MyISAM是表锁，索引对并发支持更好</li><li>MyISAM将索引缓存到内存，而InnoDb将索引和数据都缓存的内存中</li><li>MyISAM在数据损坏时，无法进行全部恢复</li></ul></li><li>MyISAM的适用场景<ul><li>非事务性的应用</li><li>只读的应用</li><li>空间类应用 如gps数据，进行运算</li><li>适合大量的<code>insert</code>和<code>select</code></li></ul></li><li>InnoDB<ul><li></li></ul></li></ul><h2 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h2><ul><li><strong>未提交读</strong> 第一个连接在事务中进行写操作，另外的连接能够看见（早期的MySQL有这个问题） </li><li><strong>已提交读</strong> 第一个连接在事务中进行写操作，其他的事务不可见（大部分数据库都支持）事务结束后，其他事务可见</li><li><strong>可重复读</strong> 第一个事务只要是读的内容，如果其他事务对其进行更改，以后的查询还是之前的结果</li><li><strong>可串行化</strong> 只要是读到的都加锁，很少用</li></ul><p>隔离性从低到高，并发性由高到低。InnoDB的默认级别是可重复读，事务进行后就看不见别人的事务了。</p><blockquote><p>大事务的优缺点</p></blockquote><p>优点：</p><ul><li>将大量的事务集中在一个事务可以大大减少时间(至少在sqlite中是这样)</li></ul><p>缺点：</p><ul><li>运行时间长，锁表造成大量阻塞和锁超时</li><li>若发生错误，回滚时间长</li><li>造成主从延迟</li></ul><blockquote><p>如何减少大事务</p></blockquote><ul><li>分成小事务</li><li>减少<code>select</code>，因为一般<code>select</code>占用时间长，且大多数情况下可以放到事务外头</li></ul><h2 id="建表相关"><a href="#建表相关" class="headerlink" title="建表相关"></a>建表相关</h2><ul><li>所有表的第一个字段为id，并且为主键，可选择无符号的</li><li>尽量选择<code>is not null</code>，<a href="https://blog.csdn.net/fwkjdaghappy1/article/details/7703974" target="_blank" rel="noopener">原因如下</a></li><li>字符集使用<code>utf8mb4</code></li><li>排序规则使用<code>utf8mb4_general_ci</code></li><li>varchar记得填写默认值为’’，在navicat中选择<code>EMPTY STRING</code></li><li>一般在表后面增添<code>created_at</code>和<code>updated_at</code>两个字段</li><li>记录时间尽量用datetime，而不是timestamp<ul><li>因为timestamp最多到2038年</li><li>datetime是部分时区的</li></ul></li></ul><blockquote><p>选择对应的类型</p></blockquote><ol><li><p>类型选择排序</p><ul><li>数字类型&gt;日期或二进制&gt;字符串</li><li>同级别类型中，尽量选择占用空间小的类型</li></ul></li><li><p>整数类型</p><ul><li>适用unsigned可以使范围扩大一倍</li><li>tinyint 1字节 (unsigned 0-255)</li><li>smallint 2字节 (unsigned 0-2^16)</li><li>mediumint 3字节</li><li>int 4字节<ul><li>int(11) 这种后面跟着的数字一般不用管，在字段有FILLZERO属性的时候才会补0，例如1变成<code>00000000001</code></li></ul></li><li>bigint 8字节</li></ul></li><li><p>实数类型</p><ul><li>一共有<code>float</code>、<code>double</code>、<code>decimal</code>，只有<code>decimal</code>是精确的</li><li>float 4字节</li><li>double 8字节</li><li>decimal(18,9)需要9个字节</li></ul></li><li><p><code>varchar</code></p><ul><li><code>varchar</code>是可变长度并且以字符为单位，比如<code>varchar</code>存储10个<code>utf-8</code>字符，占用30字节的空间</li><li><code>varchar</code>在0-255的时候多占用一个字节来记录长度，如果长度大于255则需要两个字节来记录长度</li><li><code>varchar</code>适合很少被更新的列，因为会产生磁盘碎片</li><li>会删除末尾的空格</li><li>适合存储不定长度的类型</li></ul></li><li><code>char</code><ul><li>不变长，定义多长，数据就是多长</li><li>不会删除末尾的空格</li><li>最大宽度为255</li><li>适合存储类型长度近似的值</li><li>适合存储短字符串</li><li>适合经常更新的字符串</li></ul></li><li><code>datetime</code> 8字节<ul><li>mysql5.6之前可以支持到秒，之后支持到微秒</li><li>与时区无关</li></ul></li><li><code>timestamp</code> 4字节<ul><li>1970年到2038年</li><li>一般用于update_time</li></ul></li><li><code>date</code> 3字节 只存日期（生日）</li><li><code>time</code> 时间，可以存到微秒</li></ol><h2 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h2><p>如果经常查询A,B两个字段，那么可以考虑对A,B同时建立索引。<br>在where查询时，查询条件为A，或者A and B，该索引生效。<br>如果where查询条件为B,则索引失效。<br>区分度（姓名，ID等唯一性比较多）大的尽量放在前面。<br>如果分别对A，B，建立单独的索引，那么在where查询时，<br>如果是A and B,则只生效A索引。<br>如果是B and A,则只生效B索引。</p><blockquote><p>索引优化策略</p></blockquote><ul><li>前缀索引的时候，尽量做到可以区分，最好每行的索引都不一样</li><li>使用联合索引<ul><li>经常会被使用的列优先</li><li>选择性高的列优先，能分辨差异的越强</li><li>宽度越小的列优先，加快IO</li></ul></li><li>覆盖索引<ul><li>优化缓存，减少磁盘IO</li><li>随机IO变成顺序IO</li><li>避免主键索引的二次查询</li></ul></li></ul><blockquote><p>使用索引的好处</p></blockquote><ul><li>大大减少存储引擎需要扫描的数据量</li><li>排序的时候避免创建临时表</li><li>将随机IO变成顺序IO</li></ul><blockquote><p>索引的缺点</p></blockquote><ul><li>增加写操作的成本</li><li>会增加查询优化器的选择时间</li></ul><blockquote><p>索引类型</p></blockquote><ol><li><code>Btree</code><ul><li>最佳场景<ul><li>全值匹配索引</li><li>精确匹配左前列并范围匹配另外一列</li><li>匹配最左前缀 like ‘123%’</li><li>只访问索引的查询</li></ul></li><li>使用限制<ul><li>最左边不是索引，则无法使用索引</li><li>使用索引时不能跳过索引中的列</li><li>not in 和 &lt;&gt; 无法使用索引</li><li>如果有一列使用了范围查询，则右边的所有列都无法使用索引</li></ul></li></ul></li><li><code>Hash</code><ul><li>场景<ul><li>精确全值匹配</li></ul></li><li>使用限制<ul><li>要查两遍，先查hash表，再查行</li><li>无法用于排序</li><li>有可能产生碰撞</li></ul></li></ul></li></ol><p><a href="https://blog.csdn.net/m0_38001814/article/details/80324729" target="_blank" rel="noopener">补充链接</a></p><p>普通索引命名方式<code>IDX_CLASS_ID_USER_ID</code>,唯一索引命名方式<code>UNQ_CLASS_ID_USER_ID</code></p><h2 id="锁相关"><a href="#锁相关" class="headerlink" title="锁相关"></a>锁相关</h2><p><a href="https://juejin.im/post/5b82e0196fb9a019f47d1823" target="_blank" rel="noopener">全面了解mysql锁机制(InnoDB)</a></p><h2 id="查看慢查询日志"><a href="#查看慢查询日志" class="headerlink" title="查看慢查询日志"></a>查看慢查询日志</h2><blockquote><p>慢查询日志的配置项</p></blockquote><ul><li><code>slow_query_log</code> 启动/停止记录慢查询日志</li><li><code>show_query_log_file</code> 指定慢查询日志的存储路径以及文件</li><li><code>long_query_time</code> 指定记录慢查询日志SQL执行时间的阈值，默认为10秒，一般改成0.01秒比较合适</li><li><code>log_queries_not_using_indexes</code> 记录没有启用索引的sql语句</li></ul><blockquote><p>慢查询日志记录的内容</p></blockquote><ul><li>用户名</li><li>ip</li><li>查询时间</li><li>占用锁的时间</li><li>返回的数据行数</li><li>扫描的数据行数</li><li>运行SQL的时间戳</li><li>SQL语句</li></ul><blockquote><p>慢日志查询常用软件</p></blockquote><ul><li><code>mysqldumpslow</code>(MySQL自带的)，可按照多种情况排序</li><li><code>pt-query-digest</code> 需另外下载，可按照SQL的优劣程度进行排序(推荐用这个)</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>MySQL一次sql占用一个cpu，是不能拆的，所以选购cpu的时候应该选择核数多的</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/zhishutech/mysql-sql-standard" target="_blank" rel="noopener">MySQL使用约束及建议</a></p><p><a href="https://coding.imooc.com/class/49.html" target="_blank" rel="noopener">扛得住的MySQL数据库架构</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="研发日志" scheme="https://blog.gfkui.com/categories/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="MySQL" scheme="https://blog.gfkui.com/tags/MySQL/"/>
    
      <category term="面试" scheme="https://blog.gfkui.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>宏观经济学-5（汇率 收支平衡 贸易赤字）</title>
    <link href="https://blog.gfkui.com/2020/05/28/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-5%EF%BC%88%E6%B1%87%E7%8E%87%20%E6%94%B6%E6%94%AF%E5%B9%B3%E8%A1%A1%20%E8%B4%B8%E6%98%93%E8%B5%A4%E5%AD%97%EF%BC%89/"/>
    <id>https://blog.gfkui.com/2020/05/28/宏观经济学/宏观经济学-5（汇率 收支平衡 贸易赤字）/</id>
    <published>2020-05-27T19:29:01.000Z</published>
    <updated>2020-11-22T08:42:51.093Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="汇率"><a href="#汇率" class="headerlink" title="汇率"></a>汇率</h2><p>汇率的变化也遵循需求供给曲线</p><p><img src="https://tencentcdn.gfkui.cn/20/05/20/%E9%9C%80%E6%B1%82%E4%BE%9B%E7%BB%99%E6%9B%B2%E7%BA%BF.jpg" alt="需求供给曲线"></p><p><strong>导致汇率变动的原因</strong></p><ol><li>两个国家不同的GDP增长率 GDP增长后，有更大的购买力，所以别国汇率走高</li><li>两个国家不同的通胀率 通货膨胀国家的货物要个别国定价一致（一价定律）所以别国汇率走高</li><li>根据利率变化，人们的投机行为 本国利率提高，吸引外来投资，本国汇率走高</li><li>进出口贸易 我们买日本车少了，就少了进口，就少了日元依赖，所以本国汇率走高</li></ol><hr><h2 id="汇率历史事件"><a href="#汇率历史事件" class="headerlink" title="汇率历史事件"></a>汇率历史事件</h2><h3 id="金本位制时代"><a href="#金本位制时代" class="headerlink" title="金本位制时代"></a>金本位制时代</h3><p>在一战之前，大多数国家都奉承<strong>金本位制度</strong>即本国货币与黄金挂钩，如果一国贸易逆差，则需要动用黄金储备购买货币；相反顺差则赚取黄金。</p><p>根据<strong>大卫·休谟</strong>提出的观点：</p><ol><li>如果一国一直贸易逆差，则本国货币减少</li><li>然后通货紧缩</li><li>相对于别国则汇率走低</li><li>有利于出口</li><li>逆差扭亏为盈</li></ol><h3 id="英国废弃金本位制度"><a href="#英国废弃金本位制度" class="headerlink" title="英国废弃金本位制度"></a>英国废弃金本位制度</h3><ol><li>一战结束后，旧的汇率不能反映货币的价值。</li><li>法国通货膨胀高，法郎被低估。英国的通货膨胀率较低，英镑被高估，导致法国贸易顺差大。</li><li>英国和美国损失大量外汇。</li><li>1930年，英国的黄金消耗极大，由于英国强盛，放弃金本位制度。</li><li>经济大萧条期间，通过提高利率，实施紧缩的货币政策，最终在1933年罗斯福放弃金本位制度</li></ol><h3 id="布雷顿森林体系-凯恩斯-vs-怀特"><a href="#布雷顿森林体系-凯恩斯-vs-怀特" class="headerlink" title="布雷顿森林体系(凯恩斯 vs 怀特)"></a><a href="https://www.youtube.com/watch?v=AqIlAv1iroc" target="_blank" rel="noopener">布雷顿森林体系(凯恩斯 vs 怀特)</a></h3><ol><li>二战后的国际货币体系混乱，各个国家互相降低汇率以增加出口</li><li>大英帝国衰弱，需要美国救济</li><li>美国十分强盛</li><li>1944年布雷顿森里体系确立所有货币与美元挂钩，美元与黄金挂钩</li><li>建立<strong>国际货币基金组织</strong>，确保美元影响力，总部设立在华盛顿，只有美国有一票否决权</li><li>建立<strong>世界银行</strong>给各国经济援助，总部也设立在华盛顿，只有美国有一票否决权</li><li>美国打完二战的强盛体现在这个协议，大英帝国逐渐衰弱，渐渐失去了对全球殖民地的控制</li></ol><h3 id="美国放弃金本位制"><a href="#美国放弃金本位制" class="headerlink" title="美国放弃金本位制"></a>美国放弃金本位制</h3><ol><li>美国在中东以及越战花了很多很多钱，贸易赤字扩大</li><li>美国偷偷增发货币</li><li>遭到法国等国的挤兑，戴高乐开航母去取黄金</li><li>美国无法做到美元与黄金挂钩，尼克松在1971年废除金本位制</li></ol><h2 id="管制浮动混合制度"><a href="#管制浮动混合制度" class="headerlink" title="管制浮动混合制度"></a>管制浮动混合制度</h2><ol><li>小部分国家例如日本、加拿大市场决定货币的价格，也可以系统干预</li><li>大部分国家采用美元或者一揽子货币的汇率政策，有些国家组成货币联盟例如欧盟</li><li><strong>七国联盟</strong>因为美国的重大贸易逆差导致美元价值下滑会遏制他们的出口，所以同意购入大量美元来推高美元价值</li></ol><h2 id="货币政策和财政政策的反作用"><a href="#货币政策和财政政策的反作用" class="headerlink" title="货币政策和财政政策的反作用"></a>货币政策和财政政策的反作用</h2><p><strong>乘数链接</strong></p><p>国内财政和货币政策，都会影响所有的贸易伙伴。例如本国收入下降，其他国的出口受阻，导致其他国的经济萎缩。</p><p><strong>与各国协调财政政策越来越重要</strong>，假设美国想减少其对日本的贸易赤字，说服日本采取扩张的财政政策，短期内日本流通的钱变多，向美国进口的东西变多，使美国的贸易赤字减少，如果日本当时处于低通胀的经济衰退，可能会接受；反之日本若处于充分就业，此举必将导致通货膨胀，很可能会拒绝。</p><p><strong>货币链接</strong></p><ol><li>为了抵御通货膨胀，美国实施紧缩的货币政策，继而提高利率</li><li>投资者抛售欧洲资产，购买美国金融资产，美元升值</li><li>欧元贬值后，增加欧洲的出口，扩大美国的贸易赤字</li></ol><p>这边有个抵消效应</p><ol><li>为了抵御通货膨胀，美国实施紧缩的货币政策，继而提高利率</li><li>欧洲为了抵消美国的利率，也提升利率</li><li>欧洲的利率提升会一直欧洲内部的投资，提高了欧洲衰退的风险</li></ol><p>在封闭的经济中，货币供给的减少，降低消费和投资，帮助释放通胀压力。然而 如果货币供给的减少提高了国内利率，这会触发额外的资本流入， 这些资本的流入可能阻挠货币政策的有效实施。因为它们会提高货币供给，维持较低的利率 较低的利率进而会增加货币的总需求。资本流入的增加也会使，美元的价值有增加的趋势 同时扩大贸易赤字。</p><p>我们在这里的底线是紧缩性货币政策，在国内GDP方面的净影响理论上是不确定的， 需要依靠个案进行具体分析。然而，在例子中，我们需要明确的是 全球协调不仅在财政政策方面至关重要，货币政策方面亦是如此， 更真实的例子应该更突出强调这一点。同时，也突出了达成这样合作的困难。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="探索" scheme="https://blog.gfkui.com/categories/%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="金融" scheme="https://blog.gfkui.com/tags/%E9%87%91%E8%9E%8D/"/>
    
      <category term="经济" scheme="https://blog.gfkui.com/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="宏观经济学" scheme="https://blog.gfkui.com/tags/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>宏观经济学-4（国际贸易）</title>
    <link href="https://blog.gfkui.com/2020/05/28/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-4%EF%BC%88%E5%9B%BD%E9%99%85%E8%B4%B8%E6%98%93%EF%BC%89/"/>
    <id>https://blog.gfkui.com/2020/05/28/宏观经济学/宏观经济学-4（国际贸易）/</id>
    <published>2020-05-27T18:29:01.000Z</published>
    <updated>2020-11-22T08:42:42.636Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p><strong>绝对优势</strong></p><p>例如沙特的石油和美国的粮食是互补的关系，这是地理因素造成的，这两个国家进行贸易可以取长补短。但是，试想大陆造什么都容易，为什么要进口呢？这就涉及到以下概念了。</p><p><strong>比较优势</strong></p><p>例如台湾一斤肉10元，造芯片20元；大陆一斤肉5元，造芯片15元。虽然大陆造芯片便宜，但是如果出口肉去换芯片岂不是更划算。这就是比较优势。</p><p><strong>关税</strong></p><p>关税(Customs Duties,Tariff) 是引进出口商品经过一国关境时，由政府所设置的海关向其引进出口商所征收的税收。</p><p><strong>配额</strong></p><p>限制每年允许进入这个国家的进口总量。</p><h2 id="进口举措带来的影响"><a href="#进口举措带来的影响" class="headerlink" title="进口举措带来的影响"></a>进口举措带来的影响</h2><h4 id="提升关税"><a href="#提升关税" class="headerlink" title="提升关税"></a>提升关税</h4><p>下图是一张需求-供给曲线，D与S为国内总供给和总需求，而红线是来自进口的量，假设进口量可以无限大，且恒定为4元，我们来进行以下分析。</p><p><img src="https://tencentcdn.gfkui.cn/20/05/20/%E8%BF%9B%E5%8F%A3%E9%9C%80%E6%B1%82%E4%BE%9B%E7%BB%99%E6%9B%B2%E7%BA%BF.jpg" alt="进口需求供给曲线"></p><ol><li>国内供给从A点衰减到C点，BC为国内生产量，而CD为进口量。</li><li>进口的收入为CDEF</li></ol><p>如果我们将关税升高两元后，进口的的价格随即提高，如下图所示。</p><p><img src="https://tencentcdn.gfkui.cn/20/05/20/%E8%BF%9B%E5%8F%A3%E6%8F%90%E5%8D%87%E5%85%B3%E7%A8%8E%E5%90%8E%E9%9C%80%E6%B1%82%E4%BE%9B%E7%BB%99%E6%9B%B2%E7%BA%BF.jpg" alt="进口需求供给曲线"></p><ol><li>因为关税提升，国内的需求上升到了GH，而进口缩减到HI了。</li><li>因为产量的提升了50个单位，增加了BCHG面积的利润。</li><li>但是消费者蒙受了损失，价格从4提升到了6，并且少消费了50单位的商品。消费者承受的损失可以用BDIG的面积表示。</li><li>输家为进口商品工业，因为进口量减少了100个单位，损失的利益为CJLE+KDMF。</li><li>最大的赢家是当局政府，增加了HJKI的税收面积。</li></ol><p>单纯的提高关税会造成国内消费者的反抗和进口国的报复性增加关税，例如中美贸易战的互相增加关税。与此同时，<strong>等价的配额</strong>是另一种正式解决方式。</p><h4 id="提升配额"><a href="#提升配额" class="headerlink" title="提升配额"></a>提升配额</h4><p>改成配额后，给进口配额就是100的进口量，那么需求供给图与之前的图一致。从前的HIJK面积是关税的税收，被国家收取；但是改成配额的形式后，HIJK为进口国获取，这样来自外国的政治压力会减少。</p><h4 id="无畏损失"><a href="#无畏损失" class="headerlink" title="无畏损失"></a>无畏损失</h4><p>CHJ的三角形代表着声称这剩余部分的损失；与此同时，KID代表消费者剩余的损失。</p><h4 id="为何实行贸易保护主义"><a href="#为何实行贸易保护主义" class="headerlink" title="为何实行贸易保护主义"></a>为何实行贸易保护主义</h4><ol><li>国防或军事自给自足，例如钢材或机动车辆的生产工业，不幸的是，目前没有客观的标准来衡量以降低经济效率为代价而增强的国防的安全。</li><li>挽救本国的工作岗位，例如美国若不提升关税，本地劳工会受到发展中国家劳工的威胁</li><li>避免国外生产者的倾销，即国外生产这用极低的价格占领市场，然后获得垄断权力以提升价格。</li><li>报复他国，但是一般会受到对面国家的报复，一般会事与愿违。</li><li>保护幼稚产业，屏蔽内部企业与外部企业的竞争，以争取幼稚企业的发展机会。</li></ol><h4 id="无关税壁垒"><a href="#无关税壁垒" class="headerlink" title="无关税壁垒"></a>无关税壁垒</h4><p>相对于关税的针对性，越来越多国际建立<strong>无关税壁垒</strong>来构造本国的关税机制，例如美国以安全为理由组织华为渗透美国市场，日本以农药为由拒绝进口瓜果蔬菜。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="探索" scheme="https://blog.gfkui.com/categories/%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="金融" scheme="https://blog.gfkui.com/tags/%E9%87%91%E8%9E%8D/"/>
    
      <category term="经济" scheme="https://blog.gfkui.com/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="宏观经济学" scheme="https://blog.gfkui.com/tags/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>宏观经济学-3（经济是如何发展的）</title>
    <link href="https://blog.gfkui.com/2020/05/28/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-3%EF%BC%88%E7%BB%8F%E6%B5%8E%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%91%E5%B1%95%E7%9A%84%EF%BC%89/"/>
    <id>https://blog.gfkui.com/2020/05/28/宏观经济学/宏观经济学-3（经济是如何发展的）/</id>
    <published>2020-05-27T17:29:01.000Z</published>
    <updated>2020-11-22T08:42:39.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="经济发展的四个车轮"><a href="#经济发展的四个车轮" class="headerlink" title="经济发展的四个车轮"></a>经济发展的四个车轮</h2><h4 id="劳工供应"><a href="#劳工供应" class="headerlink" title="劳工供应"></a>劳工供应</h4><ul><li>教育（发展中国家迈向发达国家的重要一步）</li><li>记录</li><li>动机</li></ul><h4 id="自然资源（发展中国家的优势）"><a href="#自然资源（发展中国家的优势）" class="headerlink" title="自然资源（发展中国家的优势）"></a>自然资源（发展中国家的优势）</h4><ul><li>土地</li><li>矿物</li><li>燃料</li><li>环境素质</li></ul><h4 id="资本形成（发展中国家需要这个加速发展步伐）"><a href="#资本形成（发展中国家需要这个加速发展步伐）" class="headerlink" title="资本形成（发展中国家需要这个加速发展步伐）"></a>资本形成（发展中国家需要这个加速发展步伐）</h4><ul><li>机械</li><li>工厂</li><li>道路</li></ul><h4 id="技术（发展中国家有着后发优势）"><a href="#技术（发展中国家有着后发优势）" class="headerlink" title="技术（发展中国家有着后发优势）"></a>技术（发展中国家有着后发优势）</h4><ul><li>科学技术</li><li>工程技术</li><li>管理</li><li>创业精神</li></ul><h2 id="理论发展"><a href="#理论发展" class="headerlink" title="理论发展"></a>理论发展</h2><blockquote><p>马尔萨斯陷阱</p></blockquote><p>认为对大部分人类历史来说，收入停滞的原因是因为技术的进步与发现仅仅造成人口的增加而没有提高人类的生活水平，即生育率和GDP同步增加没卵用，生活水平一样没提高。只是在1800年左右开始的工业革命才使得一些国家的人均收入大幅增加，同时他们也跳出陷阱。</p><blockquote><p>亚当斯密的国富论</p></blockquote><p>从前只有土地，人口稀少，人们生活的很幸福；土地不断增长，人口不断增长，收入一直保持恒定。</p><blockquote><p>托马斯·马尔萨斯</p></blockquote><p>土地会被耗尽，届时人口还在增长，土地不增长，会导致人们收入减少，并且人口减少到大家只能到温饱水平。</p><p>这个黑暗前景导致经济学被讽刺为“沉闷科学”。</p><blockquote><p>现代理论</p></blockquote><p>科学发展才是第一生产力，人们从土地时代走入了蒸汽时代，电气时代，计算机时代，生产力在不断提升，人们的收入也在不断提高，从而冲破了土地的限制。</p><blockquote><p>APF模型</p></blockquote><ul><li>资本的深化使行业增长</li><li>在没有技术革新的情况下，资本深化会带来滞涨</li><li>只有通过技术革新，我们才能避免掉入经济停滞的陷阱</li></ul><h2 id="如何发展经济"><a href="#如何发展经济" class="headerlink" title="如何发展经济"></a>如何发展经济</h2><p><strong>贫穷可能会恶性循环</strong></p><p><img src="https://tencentcdn.gfkui.cn/20/05/20/%E8%B4%AB%E7%A9%B7%E7%9A%84%E6%81%B6%E6%80%A7%E5%BE%AA%E7%8E%AF.jpg" alt="贫穷的恶性循环"></p><p><strong>经济发展秘诀</strong></p><ol><li>建立法律</li><li>开放经济，国际贸易</li><li>控制人口增长</li><li>招商引资</li><li>人力资本建设</li><li>与邻国保持和平</li><li>建立央行</li><li>建立货币政策</li><li>私有化国企</li><li>进一步降低贸易壁垒，低廉的劳动力可以跟欧美竞争</li><li>债务免除，在可以的情况下，免除债务以获得投资</li><li>人才留学，可别导致人才流失</li><li>减少对其的军火贩卖，以增加基础设施和教育支出</li></ol><h2 id="财政政策的钱"><a href="#财政政策的钱" class="headerlink" title="财政政策的钱"></a>财政政策的钱</h2><p>前面讨论了当经济萧条时，采用宽松的货币政策，可是这些钱是从哪里来的呢</p><p>政府通过税收增加收入，当税收不足以支撑开支时，财政赤字就出现了。这个时候政府一般会发行国债来借钱进行开支。</p><p>政府可通过<strong>提高通货膨胀率</strong>来减少国债。</p><p>例如如果名义赤字为1000亿，通过膨胀率为10%，国债为50000亿，那么真实赤字是多少？<br><br>真实借来的钱=50000亿x(1+10%)=55000亿<br><br>国债赚的钱=真实借来的钱-国债=55000亿-50000亿=5000亿<br><br>财政赤字=现有赤字-国债赚的钱=1000亿-5000亿=-4000亿<br><br>这样政府就可以靠国债扭亏为盈了，但是前提是<strong>通货膨胀是在意料之外</strong>，因为如果大家都知道会通货膨胀的话，就不会投资你了。</p><p>赤字有两种</p><ul><li>结构性赤字 即使是充分就业也会产生的，这类赤字很难改变</li><li>周期性赤字 跟着经济周期浮动的赤字<ul><li>经济下行阶段，税收不足，导致赤字增加</li><li>上行阶段，政府存钱</li></ul></li></ul><blockquote><p>政府支出是经济稳定器</p></blockquote><p>经济周期和政府支出一般是反方向的，这样更能调整经济活动</p><ul><li>经济下行阶段，政府扩大支出，例如粮食救助和失业补助，增加基础设施建设</li><li>经济上行阶段，政府通过税收存钱，以应付下次经济下行</li></ul><blockquote><p>核算周期性赤字</p></blockquote><p>假设GDP为10万亿，赤字为1000亿，失业率为7%，比充分就业高1%，税率为10%，那么周期性赤字是多少？</p><ol><li>根据奥肯法则，失业率增加1%，GDP降低2%，即GDP亏了10万亿x2%=2000亿</li><li>政府税收少收了2000亿x30%=600亿</li><li>周期性赤字为600亿，结构性赤字为400亿</li></ol><h3 id="财政赤字怎么办"><a href="#财政赤字怎么办" class="headerlink" title="财政赤字怎么办"></a>财政赤字怎么办</h3><p><strong>加税</strong></p><blockquote><p>平衡预算乘数</p></blockquote><p>因为当你以相同的幅度，同时增加政府支出和提高税收时，你得到的经济增长量 与政府花费的金额是完全相同的。</p><p>增加税收的同时，由于挤出效应，会减少民间的投资，民间投资少了，经济无法扩张</p><p><strong>发行国债</strong></p><p>为了吸引境外投资者，会增加收益率，但是境外投资者需要转换货币，需要本国货币的供应，所以本国货币汇率走强。本国货币走强会导致出口额下降，出口额上升。</p><p><em>政府的预算赤字和贸易逆差成为双赤字</em></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="探索" scheme="https://blog.gfkui.com/categories/%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="金融" scheme="https://blog.gfkui.com/tags/%E9%87%91%E8%9E%8D/"/>
    
      <category term="经济" scheme="https://blog.gfkui.com/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="宏观经济学" scheme="https://blog.gfkui.com/tags/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>宏观经济学-2（经济学的各种流派）</title>
    <link href="https://blog.gfkui.com/2020/05/28/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-2%EF%BC%88%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%9A%84%E5%90%84%E7%A7%8D%E6%B5%81%E6%B4%BE%EF%BC%89/"/>
    <id>https://blog.gfkui.com/2020/05/28/宏观经济学/宏观经济学-2（经济学的各种流派）/</id>
    <published>2020-05-27T16:50:18.000Z</published>
    <updated>2020-11-22T08:42:37.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="流派的简介"><a href="#流派的简介" class="headerlink" title="流派的简介"></a>流派的简介</h2><blockquote><p>古典经济学</p></blockquote><p>亚当斯密：制造业和海外掠夺都不是唯一的价值来源，整个国家的日常交易才是大宝藏，并且市场绝对公平，不会有垄断，能够自然平衡。</p><blockquote><p>新古典经济学（疑问）</p></blockquote><p>张伯伦：不存在完全竞争的市场，市场是不公平的，边际效应/福利效应，微观经济学从此发迹。新古典经济学渐渐产生。</p><p>凯恩斯：市场的自我调节有时间上的延迟性，国家应该用财政政策去弥补。反对古典经济学。</p><p>预期流派：他们认为，人都是想要最大化自己利益的理性人，所以不管你出台什么政策，市场都能化解。</p><h2 id="古典经济学"><a href="#古典经济学" class="headerlink" title="古典经济学"></a>古典经济学</h2><h4 id="时间：亚当·斯密的国富论-1976-1920"><a href="#时间：亚当·斯密的国富论-1976-1920" class="headerlink" title="时间：亚当·斯密的国富论 1976-1920"></a>时间：亚当·斯密的国富论 1976-1920</h4><p>古典经济学总供给曲线</p><p><img src="https://tencentcdn.gfkui.cn/20/04/27/%E5%8F%A4%E5%85%B8%E7%BB%8F%E6%B5%8E%E5%AD%A6%E6%80%BB%E4%BE%9B%E7%BB%99%E6%9B%B2%E7%BA%BF.jpg" alt="古典经济学总供给曲线"></p><p>古典经济学认为生产数量始终是保持恒定的且都在充分就业的情况下，一旦需求增加就一定是通货膨胀，政府无法通过货币政策或财政政策对经济进行干预。<strong>显然不对呀</strong></p><h2 id="凯恩斯经济学"><a href="#凯恩斯经济学" class="headerlink" title="凯恩斯经济学"></a>凯恩斯经济学</h2><h4 id="时间：1920-1970"><a href="#时间：1920-1970" class="headerlink" title="时间：1920-1970"></a>时间：1920-1970</h4><p><a href="https://zhuanlan.zhihu.com/p/24857400" target="_blank" rel="noopener">需求与供给模型</a></p><p><img src="https://tencentcdn.gfkui.cn/19/9/16/%E9%9C%80%E6%B1%82%E4%BE%9B%E7%BB%99%E6%A8%A1%E5%9E%8B.jpg" alt="需求与供给模型"></p><blockquote><p>AD为什么是下降的</p></blockquote><ol><li>当价格水平下降时，消费者的购买力增加，对商品与服务的需求增加。</li><li>当价格水平下降时，利率也相应下降，利率下降将随之引起厂商的投资支出增加，以及消费者在包括汽车、住宅等项下的支出增加。</li><li>当国内价格水平下跌时，国外商品的价格相对上升，这将导致对当前价格更高的外国商品的需求的减少；而出口需求却提高，提高了总需求的数量。</li></ol><blockquote><p>供给曲线的详细描述</p></blockquote><p><img src="https://tencentcdn.gfkui.cn/19/9/16/%E4%BE%9B%E7%BB%99%E6%9B%B2%E7%BA%BF.png" alt="供给曲线"></p><p>其中黑色的是供给曲线，划分为三个不同的区域；红色的是需求曲线在不同的政策下移动。</p><ul><li>凯恩斯区域<ul><li>描述：增大产量，价格变化不明显；导致大量机器工人空闲，经济萧条阶段</li><li>增加需求后，价格基本不变</li><li>资源的投入不会产生通货膨胀，所以可以增加政府支出来刺激经济</li></ul></li><li>古典区域<ul><li>描述：产出已经到了满负荷状态</li><li>若投资或增加需求会导致价格上升，因而通货膨胀</li></ul></li><li>复苏区域<ul><li>实际产出的增加会伴随的价格水平的上升</li></ul></li></ul><blockquote><p>在衰退时期,经济如何调整以重回充分就业状态？</p></blockquote><p>古典经济学家认为：价格调节机制会将拯救经济。具体来说，他们认为如果存在失业，物价、工资水平以及利率都会下降;反过来,这将增加消费、生产、投资，并快速使经济回复到充分就业均衡中去。</p><p>凯恩斯理论学派认为：在价格调节机制起作用前，这种调节机制将被更有效的收入调节机制所压倒。就凯恩斯理论而言，当经济陷入衰退时，人们的收入就会下降 这种减少将导致消费减少以及储蓄减少；同时，企业也会相应地减少投资和生产 这种依次在消费、储蓄、投资和产量上的减少。会驱使经济衰退加剧，而不是重回充分就业的状态。</p><h3 id="凯恩斯主义下，政府如何实施宽松的货币政策"><a href="#凯恩斯主义下，政府如何实施宽松的货币政策" class="headerlink" title="凯恩斯主义下，政府如何实施宽松的货币政策"></a>凯恩斯主义下，政府如何实施宽松的货币政策</h3><p><img src="https://tencentcdn.gfkui.cn/20/05/20/%E5%A6%82%E4%BD%95%E5%AE%9E%E8%A1%8C%E9%87%8F%E5%8C%96%E5%AE%BD%E6%9D%BE%E7%9A%84%E8%B4%A2%E6%94%BF%E6%94%BF%E7%AD%96.jpg" alt="如何实行量化宽松的财政政策"></p><h4 id="历史事件"><a href="#历史事件" class="headerlink" title="历史事件"></a>历史事件</h4><p>到二十世纪七十年代前，经济学家们都不相信 同时存在高通胀和高失业率的情况。其中一个上升，另一个必然降低。 但是二十世纪七十年代证明，经济学家在这一点上是错误的， 并且同样的错误，在凯恩斯经济理论不能，解决新的滞涨问题上被暴露出来。</p><h4 id="凯恩斯经济学的困境"><a href="#凯恩斯经济学的困境" class="headerlink" title="凯恩斯经济学的困境"></a>凯恩斯经济学的困境</h4><p>简单来说，高失业率导致生产成本增加，在需求供给曲线中，曲线向上升，将导致需求减少以及物价上涨，以下是滞涨发生的经过。<br><img src="https://tencentcdn.gfkui.cn/20/04/27/%E6%BB%9E%E6%B6%A8-%E9%9C%80%E6%B1%82%E4%BE%9B%E7%BB%99%E6%9B%B2%E7%BA%BF.jpg" alt="滞涨-需求供给曲线"></p><p>凯恩斯主义经济理论的困境就是这样</p><ul><li>使用扩张性的政策来降低失业率，会单纯地引发更严重的通货膨胀 </li><li>使用紧缩的政策抑制通货膨胀，会加深经济衰退</li></ul><p>菲利浦斯曲线：当失业水平较低时工资倾向于上升；反之，当失业水平较高时工资则倾向于下降。所以在通货膨胀的时候，高工资对应的是低失业率，但是这个观点在七十年代被推翻了。</p><p>例如,“适应性预期理论”</p><ol><li>美联储运用扩张性货币政策来弥补衰退缺口。 多次面对这种积极政策的经验，让人们明白，提高货币供应量会引发通货膨胀。</li><li>为了在通胀中保护自己，在理性预期的世界中，企业会立刻通过提高价格来应对美联储的扩张政策，工人们将会要求提高薪水。</li><li>这种行为产生的刺激效应将完全被通胀造成的紧缩效应抵消。</li></ol><p>下图展示的是1970年代的供给曲线，由A到B到C点的经过。<br><img src="https://tencentcdn.gfkui.cn/20/04/27/1970%E5%B9%B4%E4%BB%A3%E7%9A%84%E4%BE%9B%E7%BB%99%E6%9B%B2%E7%BA%BF.jpg" alt="1970年代的供给曲线"></p><h2 id="新古典经济学"><a href="#新古典经济学" class="headerlink" title="新古典经济学"></a>新古典经济学</h2><h4 id="时间：1990-至今"><a href="#时间：1990-至今" class="headerlink" title="时间：1990-至今"></a>时间：1990-至今</h4><h4 id="历史事件-1"><a href="#历史事件-1" class="headerlink" title="历史事件"></a>历史事件</h4><p>老布什的经济顾问在1990年的经济衰退中，断然拒绝使用凯恩斯主义的扩张货币政策，二十使用新古典经济学建立在长期目标基础上更稳定、更系统的政策。但是真正进行经济复苏的时候是下一任总统克林顿。</p><h4 id="历史事件-2"><a href="#历史事件-2" class="headerlink" title="历史事件"></a>历史事件</h4><p>在2010年后，韩国/日本/美国都开始进行了经济衰退，原因主要是两个：</p><ul><li>由于有个牛逼的国家（中国），很多国家的贸易逆差逐渐扩大<ul><li>coursera课程的教授的观点为，中国加入WTO后，立刻向美国出口大量廉价且拥有非法补贴的产品，接下来的10年，关闭了5万家工厂以及失去500万个制造业工作岗位</li><li>上述的问题是结构性的</li></ul></li><li>更多的公司在海外建厂，使得国内的投资低增长</li></ul><p>古典经济学建立在“理性预期理论”的基础上，指出当政府进行扩张的政策时，大家都非常聪明，会直接涨价而不是有个慢慢的过程，即上图的A点是直接飙到C点的。</p><h2 id="经济学的三个重要问题"><a href="#经济学的三个重要问题" class="headerlink" title="经济学的三个重要问题"></a>经济学的三个重要问题</h2><h3 id="什么导致了经济中的不稳定性，并使其偏离了充分就业的产出水平？"><a href="#什么导致了经济中的不稳定性，并使其偏离了充分就业的产出水平？" class="headerlink" title="什么导致了经济中的不稳定性，并使其偏离了充分就业的产出水平？"></a>什么导致了经济中的不稳定性，并使其偏离了充分就业的产出水平？</h3><ul><li>凯恩斯主义<ul><li>投资剧烈波动，而消费支出影响小</li><li>供给侧剧烈变化</li></ul></li><li>货币主义和古典经济学<ul><li>不恰当的政府政策，才是导致宏观经济不稳定的因素</li></ul></li></ul><h3 id="经济是否具备自我修复能力，若确实如此，回到充分就业产量的调整速率是多少？"><a href="#经济是否具备自我修复能力，若确实如此，回到充分就业产量的调整速率是多少？" class="headerlink" title="经济是否具备自我修复能力，若确实如此，回到充分就业产量的调整速率是多少？"></a>经济是否具备自我修复能力，若确实如此，回到充分就业产量的调整速率是多少？</h3><p>货币主义和新古典经济学家都认为，经济会朝着上图类似ABC的走法，但是调整的速度存在分歧</p><ul><li>货币主义坚持适应性预期，认为总供给向上的曲线可能很慢地发生或者不发生</li><li>新古典经济学家认为理性预期的观点，意味着瞬间发生</li></ul><p>如今，几乎所有的经济学家承认，新古典经济学，在总供给理论上 于我们帮助甚大。然而，大多数主流经济学家强烈反对，新古典理性预期在减小价格及工资伸缩性问题方面的理论。</p><h3 id="政府是否该坚持采用一套硬性规则？更准确的说是在制定财政及货币政策时慎重考虑？"><a href="#政府是否该坚持采用一套硬性规则？更准确的说是在制定财政及货币政策时慎重考虑？" class="headerlink" title="政府是否该坚持采用一套硬性规则？更准确的说是在制定财政及货币政策时慎重考虑？"></a>政府是否该坚持采用一套硬性规则？更准确的说是在制定财政及货币政策时慎重考虑？</h3><p>货币主义的观点是，增发的货币要与每年的经济生产能力保持相同的增长率，超发一定会导致通货膨胀。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="探索" scheme="https://blog.gfkui.com/categories/%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="金融" scheme="https://blog.gfkui.com/tags/%E9%87%91%E8%9E%8D/"/>
    
      <category term="经济" scheme="https://blog.gfkui.com/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="宏观经济学" scheme="https://blog.gfkui.com/tags/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>宏观经济学-1（宏观经济学的研究方向+一些词汇的解释）</title>
    <link href="https://blog.gfkui.com/2020/05/28/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-1%EF%BC%88%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%9A%84%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91-%E4%B8%80%E4%BA%9B%E8%AF%8D%E6%B1%87%E7%9A%84%E8%A7%A3%E9%87%8A%EF%BC%89/"/>
    <id>https://blog.gfkui.com/2020/05/28/宏观经济学/宏观经济学-1（宏观经济学的研究方向-一些词汇的解释）/</id>
    <published>2020-05-27T16:04:18.000Z</published>
    <updated>2020-11-22T08:42:34.051Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作了一年时间，渐渐的有了一些自己的积蓄，但是放在<code>银行</code>/<code>余额宝</code>的利息少的可怜，希望有另外的理财手段，所以对经济学有了一些兴趣。在学习理财方式上，会接触不少宏观经济学的概念，再加上最近的<code>中美贸易战</code>，<code>中国国内房地产政策</code>，我觉得还是可以稍微系统性的学习一下宏观经济学。</p><p>真正想要学习宏观经济学的导火索是这个：<a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo" target="_blank" rel="noopener">经济机器是怎样运行的</a>，有兴趣可以看一看。</p><h2 id="宏观经济学是什么"><a href="#宏观经济学是什么" class="headerlink" title="宏观经济学是什么"></a>宏观经济学是什么</h2><h3 id="经济学研究的行为"><a href="#经济学研究的行为" class="headerlink" title="经济学研究的行为"></a>经济学研究的行为</h3><ul><li>微观经济学<ul><li>个体市场</li><li>个体商业</li><li>消费者</li><li>投资者</li><li>工人阶层</li></ul></li><li>宏观经济学<ul><li>通货膨胀 <ul><li>如价格指数CPI</li><li>工业品出厂价格指数PPI</li><li>GDP平减指数</li></ul></li><li>失业<ul><li>摩擦性失业 个人跳槽 <strong>自然情况</strong></li><li>周期性失业 经济衰退时期 <strong>微观经济学努力解决</strong></li><li>结构性失业 机器取代人工 <strong>最难解决的失业类型</strong></li></ul></li><li>经济增长率<ul><li>国内生产总值GDP算法<ul><li>产出法 消费+投资+政府支出+净出口</li><li>成本法 工人工资+产权租金收益+贷款人利息+企业利润</li></ul></li><li>区分GDP<ul><li>实际GDP 社会生产产品总量</li><li>潜在GDP 不引起通胀的情况下可以生产的最多产品量</li></ul></li><li>当实际GDP远低于潜在GDP时，经济就处于衰退状态；相反，当实际GDP高于潜在GDP时， 经济就存在巨大的通胀风险</li></ul></li><li>商业周期变动率<ul><li><a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo" target="_blank" rel="noopener">经济的周期变动</a></li><li>宏观经济学家的关注<ul><li>确定循环的商业周期是否存在</li><li>它背后的力量是什么</li><li>宏观经济政策用来驾驭商业周期</li></ul></li><li>企业的关注<ul><li>经济究竟是走向了收缩还是扩张</li><li>减产还是提高产量</li></ul></li></ul></li></ul></li></ul><h3 id="主要的政策工具"><a href="#主要的政策工具" class="headerlink" title="主要的政策工具"></a>主要的政策工具</h3><ul><li>财政政策<ul><li>增加政府支出，减少税收 <strong>刺激或扩大经济规模</strong></li><li>减少政府支出，增加税收 <strong>缩减经济规模以对抗通货膨胀</strong></li></ul></li><li>货币政策<ul><li>通过控制货币供给来<strong>刺激/缩减经济</strong></li></ul></li></ul><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h4 id="货币数量论"><a href="#货币数量论" class="headerlink" title="货币数量论"></a>货币数量论</h4><blockquote><p>货币分类</p><ol><li>M1 = 交易货币 = 现金 + 银行存款 + 支票</li><li>M2 = 广义货币 = M1 + 小额定期存款 + 基金 + 股票</li><li>M3 = L = 所有短期资产</li></ol></blockquote><p>货币数量论以所谓的交易等式为基础 这个等式可以写成</p><pre><code>货币供应量(M)*货币流通速度(V)=总体物价水平(P)*实际售出的产量(Q)=名义产出</code></pre><p>古典经济学的基本假设</p><ul><li>货币流通速度（V）是恒定的</li><li>依据货币面纱论的假设，实际售出的产量（Q）不受货币供给的影响</li></ul><p>结论：物价水平的变化，是由货币供给的变化引起的 货币供给增加20%；物价就会上涨20%，货币供给减少5% 物价就会下降5%。</p><h3 id="利率"><a href="#利率" class="headerlink" title="利率"></a>利率</h3><ul><li>名义利率 赚的钱/本金</li><li>实际利率 = 通胀率 - 名义利率</li></ul><h3 id="GDP"><a href="#GDP" class="headerlink" title="GDP"></a>GDP</h3><ul><li>名义GDP 一般是国家统计局发布的用生产物品和劳务的 <strong>当年价格</strong>，也就是总资产，这里面包含了通货膨胀</li><li>实际GDP 按照某一年的<strong>当年价格</strong>进行计算，因为和可能是通货膨胀导致GDP的上升</li><li>潜在GDP 指充分就业时的GDP</li><li>GDP缺口 潜在GDP-实际GDP</li></ul><p>国家统计局发布的GDP是不准的，因为包含了通货膨胀，实际GDP才是真正的国家资产增加了多少</p><h3 id="PMI"><a href="#PMI" class="headerlink" title="PMI"></a>PMI</h3><p>采购经理指数，50为荣枯线，50以上是经济在扩张，50以下是经济在收缩，因为发布时间早于GDP且更好统计，所以是投资参考的重要指标。</p><h3 id="ICS"><a href="#ICS" class="headerlink" title="ICS"></a>ICS</h3><p>消费信心指数，包括对现状的看法和对未来的预期。大于100为乐观，小于100位悲观，因为是金融市场的早期信号，同样也是投资参考的重要指标。</p><h3 id="CPI"><a href="#CPI" class="headerlink" title="CPI"></a>CPI</h3><p>物价指数，反应通货膨胀的指标</p><h3 id="萨伊定律"><a href="#萨伊定律" class="headerlink" title="萨伊定律"></a>萨伊定律</h3><p>由工作所带来的收入总和，必将与工作创造出的商品和服务的价值相等。因此如果劳动者花费掉他们的收入，必然足够支付这些人所创造的全部商品和服务。</p><p>这么看来，供给创造了自己的需求，或者用宏观经济学的话来说，就是对于现有的总供给，总会有足够的总需求。</p><hr><h3 id="货币政策"><a href="#货币政策" class="headerlink" title="货币政策"></a>货币政策</h3><h4 id="存款准备金率"><a href="#存款准备金率" class="headerlink" title="存款准备金率"></a>存款准备金率</h4><ul><li>宽松政策：降低存款准备金率</li><li>紧缩政策：升高存款准备金率</li></ul><p>银行只能将自己的一部分钱拿出去借贷，如果当前存款准备金为率为10%，那么银行只能拿（1-10%）的钱去借贷。</p><p>例如一个人拿了1000元存款，银行只能拿出900元借贷，这900元到市场上如果存入了银行，又可以产生810元的借贷，最后总体上就有9000元在流通。</p><p>需要注意的是，存款准备金率是央行（美联储）给各个银行规定的，而央行就是银行的银行。</p><h4 id="贴现率"><a href="#贴现率" class="headerlink" title="贴现率"></a>贴现率</h4><ul><li>宽松政策：降低贴现率</li><li>紧缩政策：增加贴现率</li></ul><p>其他银行到央行拿钱的利息，利息越高，货币供应量越少；利息越少，货币供应量越多。</p><h4 id="央行在公开市场购买和出售政府债券"><a href="#央行在公开市场购买和出售政府债券" class="headerlink" title="央行在公开市场购买和出售政府债券"></a>央行在公开市场购买和出售政府债券</h4><ul><li>宽松政策：购买国债，政府多出现金流向市场</li><li>紧缩政策：出售国债，将钱锁在自己里面</li><li><strong>美联储最重要的货币政策</strong></li></ul><h3 id="通货膨胀"><a href="#通货膨胀" class="headerlink" title="通货膨胀"></a>通货膨胀</h3><ul><li>需求拉动型膨胀 过多的货币追逐过少的商品（买方推动）</li><li>成本推动型膨胀（供给方通胀） 原料费用上升（卖方推动）</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="探索" scheme="https://blog.gfkui.com/categories/%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="金融" scheme="https://blog.gfkui.com/tags/%E9%87%91%E8%9E%8D/"/>
    
      <category term="经济" scheme="https://blog.gfkui.com/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="宏观经济学" scheme="https://blog.gfkui.com/tags/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>搭建ELK全纪实 elasticsearch logstash kibana</title>
    <link href="https://blog.gfkui.com/2020/04/28/%E6%90%AD%E5%BB%BAELK%E5%85%A8%E7%BA%AA%E5%AE%9E-elasticsearch-logstash-kibana/"/>
    <id>https://blog.gfkui.com/2020/04/28/搭建ELK全纪实-elasticsearch-logstash-kibana/</id>
    <published>2020-04-28T04:32:49.000Z</published>
    <updated>2020-11-22T08:05:54.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着业务的扩张，跑web机器越来越多，传统方式如果想看网站的分析报告，需要从各个web机器获取日志，然后通过<code>awk</code>等命令行进行输出。</p><p>而目前的主流方式是使用<code>elk</code>的方式对日志集中获取并展示</p><ul><li>elasticsearch 一个<code>Nosql</code>数据库，专门存储日志信息，暂时可以理解成<code>Mysql</code>。<a href="https://blog.csdn.net/qq_21383435/article/details/79323383" target="_blank" rel="noopener">对比资料</a></li><li>logstash 一个可以通过各种方式获取日志的开源软件</li><li>kibana 将数据从数据库中查询出来并通过图表展示</li></ul><h2 id="数据流向"><a href="#数据流向" class="headerlink" title="数据流向"></a>数据流向</h2><p><img src="https://tencentcdn.gfkui.cn/19/7/30/elk%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE.png" alt="数据流向图"></p><ol><li>安装在各个web服务器的<code>logstash</code>收集日志数据</li><li><code>logstash</code>将日志数据发送给<code>elasticsearch</code>数据库</li><li><code>kibana</code>查询<code>elasticsearch</code>数据库并展示数据</li></ol><h2 id="大致的系统性认知"><a href="#大致的系统性认知" class="headerlink" title="大致的系统性认知"></a>大致的系统性认知</h2><p><a href="https://www.youtube.com/watch?v=T_sLKn3vXa4&amp;feature=youtu.be" target="_blank" rel="noopener">视频介绍elk</a></p><p>这个视频有5集，全程可以2倍速度观看，大致可以了解各个软件是干什么的，怎么运行的。以及学习<code>python</code>使用<code>logstash</code>传送数据</p><h2 id="手把手搭建一个elk"><a href="#手把手搭建一个elk" class="headerlink" title="手把手搭建一个elk"></a>手把手搭建一个elk</h2><p><a href="https://github.com/deviantony/docker-elk" target="_blank" rel="noopener">超级简易搭建elk</a></p><pre><code># 简直不要太简单git clone https://github.com/deviantony/docker-elk.gitcd docker-elkdocker-compose up -d</code></pre><p>等docker拉取镜像并启动之后。。。</p><pre><code>[kui.xiong@xm11-112 docker-elk]$ dc ps                Name                               Command               State                            Ports                          -----------------------------------------------------------------------------------------------------------------------------------------homekuixiongdockerelk_elasticsearch_1   /usr/local/bin/docker-entr ...   Up      0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp          homekuixiongdockerelk_kibana_1          /usr/local/bin/kibana-docker     Up      0.0.0.0:5601-&gt;5601/tcp                                  homekuixiongdockerelk_logstash_1        /usr/local/bin/docker-entr ...   Up      0.0.0.0:5000-&gt;5000/tcp, 5044/tcp, 0.0.0.0:9600-&gt;9600/tcp</code></pre><p>稍微等<code>kibana</code>加载完，进入<code>http://localhost:5601</code>即可看到<code>kibana</code>界面</p><p>如果碰到需要输入账户密码的情况，可参照<a href="https://github.com/deviantony/docker-elk#setting-up-user-authentication" target="_blank" rel="noopener">readme的修改密码教程</a>修改密码</p><p>搭建完成后，可以试着进入搭建的<code>kibana</code>看看如何使用的，顺便推几个数据上去练练手。</p><p>到目前为止，可以对<code>elk</code>有个稍微清晰的认知。但是如果要自己搭建一个真正的<code>elk</code>，肯定要学会logstash是如何使用的，以下介绍<code>logstash</code>是如何使用的</p><h2 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h2><p>由于刚刚<code>logstash</code>的镜像操作有些不方便，所以我在另一个虚拟机安装一个<code>logstash</code>，然后发送数据到本地的<code>elasticsearch</code>端口上</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p><a href="https://www.elastic.co/guide/en/logstash/current/installing-logstash.html" target="_blank" rel="noopener">安装logstash</a></p><h2 id="使用logstash"><a href="#使用logstash" class="headerlink" title="使用logstash"></a>使用logstash</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/index.html" target="_blank" rel="noopener">logstash官网说明</a></p><p><a href="https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/index.html" target="_blank" rel="noopener">非常详细的logstash中文使用说明</a>（有些配置新版的<code>logstash</code>不兼容，请以官方文档为准）</p><blockquote><p>使用心得</p></blockquote><p>使用<code>logstash</code>一般只需配置两个文件</p><ul><li><code>logstash.yml</code>是全局的<code>logstash</code>配置文件，启动logstash时加载的</li><li><code>test.conf</code>单个logstash监听配置，放在任何地方口可以</li></ul><p>配置任何<code>logstash</code>任务只需跟这两个文件有关</p><blockquote><p>参考示例</p></blockquote><p>将控制台输入的数据推送到远端<code>elasticsearch</code>中，我们将全部配置只放在单个配置中</p><p><strong>/tmp/config/test.conf</strong></p><pre><code>input {    stdin {        add_field =&gt; {&quot;key&quot; =&gt; &quot;value&quot;}        codec =&gt; &quot;plain&quot;        tags =&gt; [&quot;add&quot;]        type =&gt; &quot;std&quot;    }}output {    elasticsearch {        hosts =&gt; &quot;eshost:9200&quot;        user =&gt; &quot;elastic&quot;        password =&gt; &quot;password&quot;    }}</code></pre><p><strong>运行命令</strong></p><pre><code>logstash -f /tmp/config/test.conf</code></pre><p>接着在键盘上随便敲，就会将数据发给<code>elasticsearch</code>，接着在<code>kibana</code>上呈现<br><img src="https://tencentcdn.gfkui.cn/19/7/30/kibana%E7%BB%93%E6%9E%9C%E5%91%88%E7%8E%B0.jpg" alt="kibana数据呈现"></p><p>单个传入的json数据</p><pre><code>{  &quot;_index&quot;: &quot;logstash-2019.07.30-000001&quot;,  &quot;_type&quot;: &quot;_doc&quot;,  &quot;_id&quot;: &quot;kSI0RmwBEDGCNjTu4LWH&quot;,  &quot;_version&quot;: 1,  &quot;_score&quot;: null,  &quot;_source&quot;: {    &quot;message&quot;: &quot;example\n&quot;,    &quot;@version&quot;: &quot;1&quot;,    &quot;@timestamp&quot;: &quot;2019-07-31T04:06:06.091Z&quot;,    &quot;host&quot;: &quot;hostname&quot;,    &quot;key&quot;: &quot;value&quot;,    &quot;type&quot;: &quot;std&quot;,    &quot;tags&quot;: [      &quot;add&quot;    ]  },  &quot;fields&quot;: {    &quot;@timestamp&quot;: [      &quot;2019-07-31T04:06:06.091Z&quot;    ]  },  &quot;sort&quot;: [    1564545966091  ]}</code></pre><blockquote><p>grok介绍</p></blockquote><p>你可以用grok插件将日志的数据提取出来插入进<code>elasticsearch</code>中，主要使用了正则表达式</p><p><a href="https://www.youtube.com/watch?v=0eVkDyizH_0&amp;t=1720s" target="_blank" rel="noopener">视频学习grok匹配模板</a></p><p><a href="http://grokdebug.herokuapp.com/" target="_blank" rel="noopener">grok测试工具</a> 注意工具中预制的可能已经启用，请谨慎使用</p><p><a href="https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns" target="_blank" rel="noopener">常用grok匹配模板</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/deviantony/docker-elk#setting-up-user-authentication" target="_blank" rel="noopener">The ELK stack powered by Docker and Compose</a></p><p><a href="https://blog.csdn.net/jeikerxiao/article/details/84403437" target="_blank" rel="noopener">CentOS7 安装 Logstash</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="研发日志" scheme="https://blog.gfkui.com/categories/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="elk" scheme="https://blog.gfkui.com/tags/elk/"/>
    
      <category term="logstash" scheme="https://blog.gfkui.com/tags/logstash/"/>
    
      <category term="elasticsearch" scheme="https://blog.gfkui.com/tags/elasticsearch/"/>
    
      <category term="日志" scheme="https://blog.gfkui.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>《富爸爸，穷爸爸》第一册财务自由之路 感想</title>
    <link href="https://blog.gfkui.com/2020/04/27/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E3%80%8A%E5%AF%8C%E7%88%B8%E7%88%B8%EF%BC%8C%E7%A9%B7%E7%88%B8%E7%88%B8%E3%80%8B%E7%AC%AC%E4%B8%80%E5%86%8C%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF-%E6%84%9F%E6%83%B3/"/>
    <id>https://blog.gfkui.com/2020/04/27/奇怪的知识/《富爸爸，穷爸爸》第一册财务自由之路-感想/</id>
    <published>2020-04-27T15:16:27.000Z</published>
    <updated>2020-11-22T09:15:25.496Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作是十年，甚至二十年的事情。然而像我们程序员的行业，可能只有十五年的时间。</p><p>我们花了大量的时间钻研技术，为了找到更好的工作，而找到了更好的工作，之后呢？？？</p><p>工作可能只是二十年内思考的事情，但是以后呢？我们难道不需要花更长的时间去思考我们一生的问题？</p><p><strong>《富爸爸，穷爸爸》这本书的观念可能会刷新你的认知，你会发现人生有新的路可规划。</strong></p><p><strong>当以后人生的方向迷失时，希望能够冷静下来，回顾一下这本书和这篇文章。</strong></p><h2 id="富人不为钱工作"><a href="#富人不为钱工作" class="headerlink" title="富人不为钱工作"></a>富人不为钱工作</h2><blockquote><p>穷人和中产阶级为钱而工作，而富人让钱为他们工作。</p></blockquote><p>在本书中，穷人和中产阶级都是月光的，相对来说，中产阶级收入更高，但是对应高品质生活带来的花销也导致月光。</p><p>穷人和中产阶级很害怕没有收入的黑暗时刻，所以在工作上不敢承受风险。而为了工作的稳定，一定会被富人剥削更低的工资，就像驴子在拼命拉车，因为车夫在它鼻子前面放了个胡萝卜。车夫知道该把车驶向何处，而驴子却是在追逐一个幻觉。</p><p>而富人是让资产自己增值工作赚钱，理财和雇佣员工都是如此。</p><p><em>作者好像还突出了要降低恐惧和欲望的理念，这样才能冷静思考到赚钱的机会。</em></p><h2 id="财务知识"><a href="#财务知识" class="headerlink" title="财务知识"></a>财务知识</h2><p>此处的财务知识可能会与通常理解的不太一样。需要弄清的就是以下两个词：</p><ul><li>资产：可以自动替你赚钱</li><li>负债：需要花出去钱</li></ul><p>基金、债券、股票是资产，因为它能帮你赚钱；贷款买车是负债，因为每隔一段时间就要支出；贷款买的房，没有产生卖出或者出租的收益，就是负债。</p><p><strong>我们要做的是：增加资产，减少负债</strong></p><p>如果我们有了较佳的理财能力，假设能保持10%的年收益率，在存了10年工资的你，就可以依靠理财为生了。所以增加资产到可以钱生钱之后，财务自由不是梦~</p><blockquote><p>决定拥有很昂贵的房子，而不是开始证券投资的缺点</p></blockquote><ol><li>失去了用其他资产增值的机会。</li><li>本可以用来投资的资本将用于房子的高额、长期开支</li><li>失去学会投资的机会</li></ol><h2 id="关注自己的事业"><a href="#关注自己的事业" class="headerlink" title="关注自己的事业"></a>关注自己的事业</h2><p>麦当劳的创始人<code>雷·克罗克</code>透露过，自己不是专门经营汉堡业务，而是门店的房地产业务。</p><p>职业是短暂的，而事业是长久的。</p><p>事业包括：</p><ol><li>不需我到场就可以正常运作的业务</li><li>股票、基金、债券等投资理财能力</li><li>产生收入的房地产</li><li>专利权，如音乐、手稿、专利、软件著作</li><li>任何其他有价值、可产生收入或可能增值并且有很好的流通市场的东西</li></ol><p><em>作者喜欢投资小的、没名气的公司，这些公司风险是大，但是如果喜欢你所投资的对象，了解它并懂得游戏规则，风险就会减少。对于小公司，作者的策略是一年内脱手。作者的房地产投资策略是从小买卖开始并一点点做大，条件允许的话尽量晚一些出手。</em></p><h2 id="赋税"><a href="#赋税" class="headerlink" title="赋税"></a>赋税</h2><blockquote><p>税收演变</p></blockquote><p>早期的英国和美国是不需要捐税，只有在战争时期才会征税，之后演变成为了贫富平衡对富人征税，到最后中产阶级征税。这样的结局是富人不需要征税，而只有中产阶级在征税。</p><p>因为一旦“劫富济贫”的征税开始实施，钱流入政府，政府分配工资给公务员，再进行采购。政府的政策是，如果你是一个政府官员，就应该避免拥有过多钱，如果你没有用完预算资金，在下次预算中你会被削减这些钱的风险，你不会因为节余而获得奖励，所以政府机构会花跟多钱招募公务员，并且采购更多，最终富人赚的钱也越多，而真正赋税的就是中产阶级了。</p><blockquote><p>成立一个公司吧</p></blockquote><ol><li>税收优惠<ul><li>富人的现金流：挣钱-&gt;支出-&gt;缴税，中产阶级现金流：挣钱-&gt;缴税-&gt;支出</li><li>企业是将剩余资金缴税，而企业可以将资金投入投资、增加福利等支出，就可以少缴税</li></ul></li><li>在诉讼中获得保护，富人可以利用公司和信托将财富隐藏</li><li>进阶：雇佣律师和会计师避税</li></ol><p><em>推荐书：《股份有限公司和致富》</em></p><h2 id="当前结论-amp-观点"><a href="#当前结论-amp-观点" class="headerlink" title="当前结论&amp;观点"></a>当前结论&amp;观点</h2><p>近期总结的观点在下面展示，个人总结不一定可靠哈，希望以后能被打脸并刷新认知。</p><ol><li>对于目前买房不是刚需的我来说，暂时还没必要买房，因为参照宏观经济的大经济周期来看，由于国内曾用高额放假刺激经济，目前国内处于大经济周期的下行阶段。导致经济虚高的杠杆非降不可，而最大的杠杆就是房价，目前我认为房价是高点，等之后经济恢复到实际生产水平再考虑。</li><li>刚需购房是没有办法，想想至少要负债30年就觉得可怕。但是靠房地产投机投资行为的，只会暂时低抬高房价，到以后没人接盘之后，这些吃人血馒头的必将没有好结果。</li><li>在国内的现状，大家基本都没有目前的思维。有良好教育的人因为有着不错的薪水，容易成为中产阶级；而土老板们大多数只是当上了老板才悟出了这些知识。</li><li>增加财商（财务智商）<ol><li>会计，财务知识会教会你读懂财务报表，辨别业务的优势和弱势</li><li>投资，钱生钱的科学，设计策略和方案</li><li>了解市场，供给与需求的科学，了解受感情驱动的市场的“技术面”</li><li>法律，帮助你有效运营一个进入会计、投资和市场领域的企业并实现爆炸性的增长</li></ol></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://zhuanlan.zhihu.com/p/85244425" target="_blank" rel="noopener">为什么穷人越努力工作反而越穷了</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="奇怪的知识" scheme="https://blog.gfkui.com/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="理财" scheme="https://blog.gfkui.com/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="财商" scheme="https://blog.gfkui.com/tags/%E8%B4%A2%E5%95%86/"/>
    
      <category term="金融" scheme="https://blog.gfkui.com/tags/%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>太阳系之旅</title>
    <link href="https://blog.gfkui.com/2019/10/26/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E5%A4%AA%E9%98%B3%E7%B3%BB%E4%B9%8B%E6%97%85/"/>
    <id>https://blog.gfkui.com/2019/10/26/奇怪的知识/太阳系之旅/</id>
    <published>2019-10-25T18:34:45.000Z</published>
    <updated>2020-11-22T09:15:30.905Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道为啥，突然对一些其他领域的事情特别特别感兴趣，就像初三中考前对转笔这个小众运动特别着迷一样。期间有看过三体、学习宏观经济学、重看富爸爸系列等，看完三体后，感受到了宇宙的异常缥缈和辽阔，人类无论是空间还是时间上在宇宙中都是微小到不能再微小的尘埃，而广阔的宇宙有着众多的未知可以去探索。了解宇宙最终还是了解我们自己。</p><p>世界万物都是有规律可循，有始有终，星系有辉煌和衰老，人的一生有起起伏伏，经济的也是大周期和小周期交替进行。对于周边发生的事物，无论对当时的影响有多大，将时间线拉长只是过眼云烟而已。</p><p>银河系下有太阳系，太阳系下有各大行星，正如分子下有原子，原子下有电子，而原子核电子也是不可分割的吗，会不会像三体描绘的，将质子展开，竟然存在一个文明。而更高维的世界，看着太阳系就跟我们看着原子一样。</p><p>最后感谢李永乐老师深入浅出许多宇宙方向课程，还有BBC的《行星》纪录片把我的思绪随着人造卫星漫游整个太阳系。</p><h2 id="行星简介"><a href="#行星简介" class="headerlink" title="行星简介"></a>行星简介</h2><table><thead><tr><th>名称</th><th>距离太阳</th><th>半径</th><th>公转速度</th><th>自转速度</th><th>地表温度</th><th>形态</th></tr></thead><tbody><tr><td>水星</td><td>5800万公里</td><td>2439公里</td><td>88天</td><td>58天</td><td>-172℃~430℃</td><td>刚体</td></tr><tr><td>金星</td><td>1.08亿公里</td><td>6073公里</td><td>224.7天</td><td>243天</td><td>465℃～485℃</td><td>刚体</td></tr><tr><td>地球</td><td>1.5亿公里</td><td>6378公里</td><td>365天</td><td>24小时</td><td>-89.2℃~58.8℃</td><td>刚体</td></tr><tr><td>火星</td><td>2.28亿公里</td><td>3396公里</td><td>687天</td><td>24小时</td><td>-5℃~-87℃</td><td>刚体</td></tr><tr><td>木星</td><td>7.8亿公里</td><td>69911公里</td><td>11.8年</td><td>9小时50分</td><td>-148℃</td><td>流体(液体+气体)</td></tr><tr><td>土星</td><td>14亿公里</td><td>60268公里</td><td>29.6年</td><td>10.546小时</td><td>-191.15℃～-130.15℃</td><td>流体(液体+气体)</td></tr><tr><td>天王星</td><td>29亿公里</td><td>25560公里</td><td>84年</td><td>17小时</td><td>-224℃</td><td>流体(液体+气体) </td></tr><tr><td>海王星</td><td>45亿公里</td><td>49532公里</td><td>164年</td><td>16小时</td><td>-214℃</td><td>流体(液体+气体) </td></tr></tbody></table><h2 id="水星-Mercury"><a href="#水星-Mercury" class="headerlink" title="水星 Mercury"></a>水星 Mercury</h2><p><img src="https://tencentcdn.gfkui.cn/19/10/19/%E6%B0%B4%E6%98%9F.png" alt="水星"></p><ul><li>远日点7000万公里，近日点4600万公里，轨道呈椭圆形，这点很神奇</li></ul><p><strong>人造卫星经过</strong></p><blockquote><p>2004年信使号</p></blockquote><ol><li>通过探测引力场以及自转时的偏差，发现内核半径占整个星球的85%</li><li>有很多易挥发的元素，例如硫、钾</li><li>在水星上硬着陆</li></ol><h3 id="如何形成"><a href="#如何形成" class="headerlink" title="如何形成"></a>如何形成</h3><p>推论： 在距离太阳1.7亿公里的地方形成，某颗大型行星与水星碰撞，将水星推向了太阳，所以是那样的轨道。并且外表皮都碎裂了，形成了金星，而水星只是内核而已。</p><h2 id="金星-Venus"><a href="#金星-Venus" class="headerlink" title="金星 Venus"></a>金星 Venus</h2><p><img src="https://tencentcdn.gfkui.cn/19/10/19/%E9%87%91%E6%98%9F.png" alt="金星"></p><ul><li>有大气层，二氧化碳96.5%</li><li>大气压是地球的89倍</li><li>金星与地球的组成、大小相似</li><li>科学家推测以前的太阳比较暗淡，金星也像地球一样有生命；后来太阳膨胀，导致金星表面温度过高</li><li>温度升高，大量的水进入大气，温室效应太过剧烈，所以温度越来越高</li><li>温度最高的行星</li></ul><p><strong>人造卫星经过</strong></p><blockquote><p>苏联发射了多颗人造卫星</p></blockquote><p>一开始大家以为金星上有水有生命，还专门设计可以浮起来的卫星。金星13号实现软着陆，拍摄了第一张金星的地表照片，发现金星是人间地狱。</p><h2 id="地球-Earth"><a href="#地球-Earth" class="headerlink" title="地球 Earth"></a>地球 Earth</h2><p><img src="https://tencentcdn.gfkui.cn/19/10/19/%E5%9C%B0%E7%90%83.png" alt="地球"></p><ul><li>70%被水覆盖</li><li>百万种生物</li><li>已确定生命是来自地球自身（39亿年前），可能是火山口的化学反应</li><li>大气层厚度100公里</li></ul><p><strong>火山活动的能量来源</strong></p><ul><li>45亿年前地球形成时产生的余热</li><li>地核附近各种化学元素的放射性衰变</li></ul><p><strong>如何形成的</strong></p><ol><li>二氧化碳浓度非常高，海水呈酸性，40亿年前是个有毒的行星</li><li>海藻中和了海洋的酸碱，并且红色浓雾的大气（甲烷）变成了氧气</li></ol><p><strong>为什么大气能保持</strong></p><p>因为地磁引力，使太阳风不会直接袭击地球；而地磁引力是铁水由于自转旋转，带着电荷产生的。</p><h2 id="火星-Mars-曾经的水世界"><a href="#火星-Mars-曾经的水世界" class="headerlink" title="火星 Mars 曾经的水世界"></a>火星 Mars 曾经的水世界</h2><p><img src="https://tencentcdn.gfkui.cn/19/10/19/%E7%81%AB%E6%98%9F.png" alt="火星"></p><ul><li>有着所有生命出现的化学必要条件，轨道也相对适宜</li><li>由于有温室气体，所以表面的水流淌了几亿年</li><li>由于火星半径小，大气层逐渐消失，水直接被蒸发进了宇宙，还在蒸发（火星地核不活动了，所以没有磁场，只能直面太阳风）</li><li>有个最大的火山 奥林匹斯山</li><li>十分狭长的水手谷</li><li>赫拉斯盆地（被撞的）</li><li>25亿年前，火星是个水世界，温度25℃<ul><li>某天无数小行星冲进火星并解体（39亿年前）</li><li>估计每平方米有53吨岩石落下</li><li>推测原因：海王星的向外迁移的时候经过<code>柯伊伯带</code>，将大量陨石带向火星和地球</li></ul></li></ul><p><strong>人造卫星经过</strong></p><ol><li>水手4号 环绕拍摄</li><li>维京号软着陆到火星</li><li>好奇号<ul><li>这个屌的一比，先降落伞带过去，然后有个反向火箭助推器稳在空中，最后将好奇号放置在火星上</li><li>将土壤采集并且显微镜研究，发现土壤中有2%的水</li></ul></li></ol><h2 id="木星-Jupiter"><a href="#木星-Jupiter" class="headerlink" title="木星 Jupiter"></a>木星 Jupiter</h2><p><img src="https://tencentcdn.gfkui.cn/19/10/19/%E6%9C%A8%E6%98%9F.png" alt="木星"></p><ul><li>最有艺术感的行星</li><li>太阳系中自转最快的行星</li><li>木星的高层大气是由体积或气体分子约88%到92%的氢和约8%到12%的氦所组成</li><li>太阳系中最大的行星（太阳系所有卫星+小行星质量的2.5倍）</li><li>气态行星，流浪地球的主角</li><li>木星形成初期吸收了大量的物质，并向太阳方向移动，大概已经到了火星轨道，但是远处的土星也在快速形成，所以讲木星拉回去了；以致于木星内轨道的物质仅剩下可以生成水星、金星、地球、火星</li><li>木星回撤期间，将小行星带的水和冰带回了太阳系内层</li></ul><p><strong>人造卫星经过</strong></p><ul><li>亚特兰蒂斯号搭载的伽利略号，拍摄了太阳系外的小行星被木星解体并撞向木星</li><li>2011年的<code>朱诺号</code><ul><li>拍摄很多近距离照片，包括<code>大红斑</code></li></ul></li></ul><h2 id="土星-Saturn"><a href="#土星-Saturn" class="headerlink" title="土星 Saturn"></a>土星 Saturn</h2><p><img src="https://tencentcdn.gfkui.cn/19/10/19/%E5%9C%9F%E6%98%9F.png" alt="土星"></p><ul><li>最出名的是土星环，平均厚度只有10米</li><li>恐龙时代的时候，有一颗全冰直径400公里卫星到了木星的刚体洛希极限解体了，形成了土星环</li><li>土星环正在消失，每秒钟10吨落向土星</li><li>早期的土星是固态物质和冰组成的</li><li>吸收了氢气和氦气后，巨大的大气压力产生大量热</li><li>密度很小<code>0.7g/cm³</code></li><li>碳物质落向土星还有钻石雨</li></ul><blockquote><p>土星环为什么这么亮</p></blockquote><p>一般的星环如果是由冰和岩石混合的，久而久之就会混合起来，变得暗淡，但是土星环是近一亿年形成的，所以光洁如新</p><p><strong>人造卫星经过</strong></p><ul><li><code>旅行者号</code>经过拍摄了上万张照片</li><li><code>卡西尼号</code>研究土星环的形成，探索土星的各个卫星</li></ul><h3 id="土卫二"><a href="#土卫二" class="headerlink" title="土卫二"></a>土卫二</h3><ul><li>土卫四和木星的双重引力，内部一直挤压 </li><li>一直喷发着水蒸气和海水冰晶，每秒钟200公斤</li><li>正在填补土星环</li><li><code>卡西尼号</code>从上空48km飞过</li><li>喷出的物质中有有机化合物和硅微粒，很可能有生命</li></ul><h3 id="土卫六-Titan"><a href="#土卫六-Titan" class="headerlink" title="土卫六 Titan"></a>土卫六 Titan</h3><ul><li>大气主要是氮气和甲烷</li><li>科学家猜测如果太阳膨胀后，土卫六可能是个可以孕育生命的地方</li></ul><h2 id="天王星-Uranus"><a href="#天王星-Uranus" class="headerlink" title="天王星 Uranus"></a>天王星 Uranus</h2><p><img src="https://tencentcdn.gfkui.cn/19/10/19/%E5%A4%A9%E7%8E%8B%E6%98%9F.png" alt="天王星"></p><ul><li>最冷的行星，永久性深度冻结状态</li><li>表面是氢气和氦气，内层是甲烷、氨和水</li><li>天王星环，星环的完整性由<code>牧羊卫星</code>控制</li><li>小行星带是竖着的</li></ul><h2 id="海王星-Neptune"><a href="#海王星-Neptune" class="headerlink" title="海王星 Neptune"></a>海王星 Neptune</h2><p><img src="https://tencentcdn.gfkui.cn/19/10/19/%E6%B5%B7%E7%8E%8B%E6%98%9F.png" alt="海王星"></p><ul><li>太阳系最猛烈的大气气象，2000km/h的速度移动</li><li>有着著名的<code>大黑斑</code></li><li>是地球的17倍大</li><li>温度比天王星高，散发的热量比从太阳接收的2.5倍还多，热量还是谜</li><li>可能是由于表面是液态，气体运动摩擦力较小</li></ul><h3 id="海卫一"><a href="#海卫一" class="headerlink" title="海卫一"></a>海卫一</h3><ul><li>海王星卫星中最大的</li><li>表面是固态氮</li><li>表面有某处有间歇泉，喷的是气态或液态的氮</li><li>公转方向与海王星相反，很可能不是海王星系统的，只是不小心被捕获了，很可能来自柯伊伯带</li></ul><h2 id="冥王星（不在8大行星）"><a href="#冥王星（不在8大行星）" class="headerlink" title="冥王星（不在8大行星）"></a>冥王星（不在8大行星）</h2><ul><li><code>哈勃望远镜</code>发现柯伊伯带有上百个与<code>冥王星</code>差不多的天体，所以后来被除名了</li><li>比月球还小</li><li>-223℃</li><li>表面是氮冰，有一个很大的平原</li><li>底下有热源，很可能是放射性元素衰变产生的</li></ul><h3 id="新视野号探索冥王星"><a href="#新视野号探索冥王星" class="headerlink" title="新视野号探索冥王星"></a><code>新视野</code>号探索<code>冥王星</code></h3><ul><li>最快的飞行器</li><li>为了节约电能，9年后被唤醒，真是个奇迹！</li><li>穿过柯伊伯带的时候，探索了最遥远的天体<code>天涯海角</code></li></ul><h2 id="其他行星"><a href="#其他行星" class="headerlink" title="其他行星"></a>其他行星</h2><h3 id="小行星带"><a href="#小行星带" class="headerlink" title="小行星带"></a>小行星带</h3><ul><li>众多小行星互相膨胀获取形成引力弹弓发射向地球内部</li><li>1亿年前，一颗10公里的行星袭击地球，导致恐龙灭绝</li></ul><h3 id="木卫一"><a href="#木卫一" class="headerlink" title="木卫一"></a>木卫一</h3><ul><li>太阳系中火山最活跃的星球，原因就是木星的强大引力(潮汐加热)</li></ul><h3 id="人造卫星经过"><a href="#人造卫星经过" class="headerlink" title="人造卫星经过"></a>人造卫星经过</h3><blockquote><p>惠更斯号实现了软着陆</p></blockquote><p>发现有鹅卵石，怀疑流淌着业态的甲烷</p><blockquote><p>卡西尼号略过</p></blockquote><p>发现有巨大的甲烷湖泊和河流</p><h2 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h2><ul><li>每隔175年就有一次9星连珠，<code>旅行者2号</code>就是依靠这个现象去太阳系外缘探测的，但是<code>旅行者2号</code>的速度非常快，观测天王星只有6小时</li><li>只有<code>天王星</code>和<code>金星</code>是反方向自转的</li><li>感到人类的渺小<ul><li>太阳系的巨大无穷</li><li>未知的东西太多太多了</li><li>人类在太阳系的历史长河中太小了</li></ul></li><li>人类到过最远的星球：冥王星</li></ul><p>我们要探索的区域必须是星辰大海！！！二向箔之后的景象。<br><img src="https://tencentcdn.gfkui.cn/19/10/19/%E6%98%9F%E7%A9%BA.jpg" alt="星空"></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="奇怪的知识" scheme="https://blog.gfkui.com/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="玄学" scheme="https://blog.gfkui.com/tags/%E7%8E%84%E5%AD%A6/"/>
    
      <category term="宇宙" scheme="https://blog.gfkui.com/tags/%E5%AE%87%E5%AE%99/"/>
    
      <category term="探索" scheme="https://blog.gfkui.com/tags/%E6%8E%A2%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透原理（转载）</title>
    <link href="https://blog.gfkui.com/2019/09/26/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8E%9F%E7%90%86%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>https://blog.gfkui.com/2019/09/26/内网穿透原理（转载）/</id>
    <published>2019-09-25T16:48:09.000Z</published>
    <updated>2020-11-22T08:05:54.309Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当今互联网到处存在着一些中间件(MIddleBoxes)，如NAT和防火墙，导致两个(不在同一内网)中的客户端无法直接通信。 这些问题即便是到了IPV6时代也会存在，因为即使不需要NAT，但还有其他中间件如防火墙阻挡了链接的建立。 目前部署的中间件多都是在C/S架构上设计的，其中相对隐匿的客户机主动向周知的服务端(拥有静态IP地址和DNS名称)发起链接请求。 大多数中间件实现了一种非对称的通讯模型，即内网中的主机可以初始化对外的链接，而外网的主机却不能初始化对内网的链接， 除非经过中间件管理员特殊配置。</p><p>在中间件为常见的NAPT的情况下（也是本文主要讨论的），内网中的客户端没有单独的公网IP地址， 而是通过NAPT转换，和其他同一内网用户共享一个公网IP。这种内网主机隐藏在中间件后的不可访问性对于一些客户端软件如浏览器来说 并不是一个问题，因为其只需要初始化对外的链接，从某方面来看反而还对隐私保护有好处。然而在P2P应用中， 内网主机（客户端）需要对另外的终端（Peer）直接建立链接，但是发起者和响应者可能在不同的中间件后面， 两者都没有公网IP地址。而外部对NAT公网IP和端口主动的链接或数据都会因内网未请求被丢弃掉。本文讨论的就是如何跨越NAT实现内网主机直接通讯的问题。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p><strong>防火墙（Firewall）</strong>： 防火墙主要限制内网和公网的通讯，通常丢弃未经许可的数据包。防火墙会检测(但是不修改)试图进入内网数据包的IP地址和TCP/UDP端口信息。</p></li><li><p><strong>网络地址转换器（NAT）</strong>： NAT不止检查进入数据包的头部，而且对其进行修改，从而实现同一内网中不同主机共用更少的公网IP（通常是一个）。</p></li><li><p><strong>基本NAT（Basic NAT）</strong>： 基本NAT会将内网主机的IP地址映射为一个公网IP，不改变其TCP/UDP端口号。基本NAT通常只有在当NAT有公网IP池的时候才有用。</p></li><li><p><strong>网络地址-端口转换器（NAPT）</strong>： 到目前为止最常见的即为NAPT，其检测并修改出入数据包的IP地址和端口号，从而允许多个内网主机同时共享一个公网IP地址。</p></li></ul><p><strong>锥形NAT（Cone NAT）</strong>： 在建立了一对（公网IP，公网端口）和（内网IP，内网端口）二元组的绑定之后，Cone NAT会重用这组绑定用于接下来该应用程序的所有会话（同一内网IP和端口），只要还有一个会话还是激活的。 例如，假设客户端A建立了两个连续的对外会话，从相同的内部端点（10.0.0.1:1234）到两个不同的外部服务端S1和S2。Cone NAT只为两个会话映射了一个公网端点（155.99.25.11:62000）， 确保客户端端口的“身份”在地址转换的时候保持不变。由于基本NAT和防火墙都不改变数据包的端口号，因此这些类型的中间件也可以看作是退化的Cone NAT。</p><pre><code>    Server S1                                     Server S218.181.0.31:1235                              138.76.29.7:1235       |                                             |       |                                             |       +----------------------+----------------------+                              |  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |  v 155.99.25.11:62000 v      |      v 155.99.25.11:62000 v                              |                           Cone NAT                         155.99.25.11                              |  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |  v   10.0.0.1:1234    v      |      v   10.0.0.1:1234    v                              |                           Client A                        10.0.0.1:1234</code></pre><p>其中Cone NAT根据NAT如何接收已经建立的（公网IP，公网端口）对的输入数据还可以细分为以下三类：</p><ol><li><p><strong>全锥形NAT（Full Cone NAT）</strong> 在一个新会话建立了公网/内网端口绑定之后，全锥形NAT接下来会接受对应公网端口的所有数据，无论是来自哪个（公网）终端。 全锥NAT有时候也被称为“混杂”NAT（promiscuous NAT）。</p></li><li><p><strong>受限锥形NAT（Restricted Cone NAT）</strong> 受限锥形NAT只会转发符合某个条件的输入数据包。条件为：外部（源）IP地址匹配内网主机之前发送一个或多个数据包的结点的IP地址。 AT通过限制输入数据包为一组“已知的”外部IP地址，有效地精简了防火墙的规则。</p></li><li><p><strong>端口受限锥形NAT（Port-Restricted Cone NAT）</strong> 端口受限锥形NAT也类似，只当外部数据包的IP地址和端口号都匹配内网主机发送过的地址和端口号时才进行转发。 端口受限锥形NAT为内部结点提供了和对称NAT相同等级的保护，以隔离未关联的数据。</p></li></ol><p>对称NAT（Symmetric NAT）: 对称NAT正好相反，不在所有公网-内网对的会话中维持一个固定的端口绑定。其为每个新的会话开辟一个新的端口。如下图所示：</p><pre><code>   Server S1                                     Server S218.181.0.31:1235                              138.76.29.7:1235       |                                             |       |                                             |       +----------------------+----------------------+                              |  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |  v 155.99.25.11:62000 v      |      v 155.99.25.11:62001 v                              |                         Symmetric NAT                         155.99.25.11                              |  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |  v   10.0.0.1:1234    v      |      v   10.0.0.1:1234    v                              |                           Client A                        10.0.0.1:1234</code></pre><h2 id="P2P通信"><a href="#P2P通信" class="headerlink" title="P2P通信"></a>P2P通信</h2><p>根据客户端的不同，客户端之间进行P2P传输的方法也略有不同，这里介绍了现有的穿越中间件进行P2P通信的几种技术。</p><h3 id="中继（Relaying）"><a href="#中继（Relaying）" class="headerlink" title="中继（Relaying）"></a>中继（Relaying）</h3><p>这是最可靠但也是最低效的一种P2P通信实现。其原理是通过一个有公网IP的服务器中间人对两个内网客户端的通信数据进行中继和转发。如下图所示：</p><pre><code>                       Server S                          |                          |   +----------------------+----------------------+   |                                             | NAT A                                         NAT B   |                                             |   |                                             |Client A                                      Client B</code></pre><p>客户端A和客户端B不直接通信，而是先都与服务端S建立链接，然后再通过S和对方建立的通路来中继传递的数据。这钟方法的缺陷很明显， 当链接的客户端变多之后，会显著增加服务器的负担，完全没体现出P2P的优势。但这种方法的好处是能保证成功，因此在实践中也常作为一种备选方案。</p><h3 id="逆向链接（Connection-reversal）"><a href="#逆向链接（Connection-reversal）" class="headerlink" title="逆向链接（Connection reversal）"></a>逆向链接（Connection reversal）</h3><p>第二种方法在当两个端点中有一个不存在中间件的时候有效。例如，客户端A在NAT之后而客户端B拥有全局IP地址，如下图：</p><pre><code>                           Server S                        18.181.0.31:1235                               |                               |        +----------------------+----------------------+        |                                             |      NAT A                                           |155.99.25.11:62000                                    |        |                                             |        |                                             |     Client A                                      Client B  10.0.0.1:1234                               138.76.29.7:1234　</code></pre><p>客户端A内网地址为10.0.0.1，且应用程序正在使用TCP端口1234。A和服务器S建立了一个链接，服务器的IP地址为18.181.0.31，监听1235端口。NAT A给客户端A分配了TCP端口62000，地址为NAT的公网IP地址155.99.25.11， 作为客户端A对外当前会话的临时IP和端口。因此S认为客户端A就是155.99.25.11:62000。而B由于有公网地址，所以对S来说B就是138.76.29.7:1234。</p><p>当客户端B想要发起一个对客户端A的P2P链接时，要么链接A的外网地址155.99.25.11:62000，要么链接A的内网地址10.0.0.1:1234，然而两种方式链接都会失败。 链接10.0.0.1:1234失败自不用说，为什么链接155.99.25.11:62000也会失败呢？来自B的TCP SYN握手请求到达NAT A的时候会被拒绝，因为对NAT A来说只有外出的链接才是允许的。 在直接链接A失败之后，B可以通过S向A中继一个链接请求，从而从A方向“逆向“地建立起A-B之间的点对点链接。</p><p>很多当前的P2P系统都实现了这种技术，但其局限性也是很明显的，只有当其中一方有公网IP时链接才能建立。越来越多的情况下， 通信的双方都在NAT之后，因此就要用到我们下面介绍的第三种技术了。</p><h3 id="UDP打洞（UDP-hole-punching）"><a href="#UDP打洞（UDP-hole-punching）" class="headerlink" title="UDP打洞（UDP hole punching）"></a>UDP打洞（UDP hole punching）</h3><p>第三种P2P通信技术，被广泛采用的，名为“P2P打洞“。P2P打洞技术依赖于通常防火墙和cone NAT允许正当的P2P应用程序在中间件中打洞且与对方建立直接链接的特性。 以下主要考虑两种常见的场景，以及应用程序如何设计去完美地处理这些情况。第一种场景代表了大多数情况，即两个需要直接链接的客户端处在两个不同的NAT 之后；第二种场景是两个客户端在同一个NAT之后，但客户端自己并不需要知道。</p><blockquote><p>端点在不同的NAT之后</p></blockquote><p>假设客户端A和客户端B的地址都是内网地址，且在不同的NAT后面。A、B上运行的P2P应用程序和服务器S都使用了UDP端口1234，A和B分别初始化了 与Server的UDP通信，地址映射如图所示:</p><pre><code>                            Server S                        18.181.0.31:1234                               |                               |        +----------------------+----------------------+        |                                             |      NAT A                                         NAT B155.99.25.11:62000                            138.76.29.7:31000        |                                             |        |                                             |     Client A                                      Client B  10.0.0.1:1234                                 10.1.1.3:1234</code></pre><p>现在假设客户端A打算与客户端B直接建立一个UDP通信会话。如果A直接给B的公网地址138.76.29.7:31000发送UDP数据，NAT B将很可能会无视进入的 数据（除非是Full Cone NAT），因为源地址和端口与S不匹配，而最初只与S建立过会话。B往A直接发信息也类似。</p><p>假设A开始给B的公网地址发送UDP数据的同时，给服务器S发送一个中继请求，要求B开始给A的公网地址发送UDP信息。A往B的输出信息会导致NAT A打开 一个A的内网地址与与B的外网地址之间的新通讯会话，B往A亦然。一旦新的UDP会话在两个方向都打开之后，客户端A和客户端B就能直接通讯， 而无须再通过引导服务器S了。</p><p>UDP打洞技术有许多有用的性质。一旦一个的P2P链接建立，链接的双方都能反过来作为“引导服务器”来帮助其他中间件后的客户端进行打洞， 极大减少了服务器的负载。应用程序不需要知道中间件具体是什么（如果有的话），因为以上的过程在没有中间件或者有多个中间件的情况下 也一样能建立通信链路。</p><blockquote><p>端点在相同的NAT之后</p></blockquote><p>现在考虑这样一种情景，两个客户端A和B正好在同一个NAT之后（而且可能他们自己并不知道），因此在同一个内网网段之内。 客户端A和服务器S建立了一个UDP会话，NAT为此分配了公网端口62000，B同样和S建立会话，分配到了端口62001，如下图：</p><pre><code>                          Server S                      18.181.0.31:1234                             |                             |                            NAT                   A-S 155.99.25.11:62000                   B-S 155.99.25.11:62001                             |      +----------------------+----------------------+      |                                             |   Client A                                      Client B10.0.0.1:1234                                 10.1.1.3:1234</code></pre><p>假设A和B使用了上节介绍的UDP打洞技术来建立P2P通路，那么会发生什么呢？首先A和B会得到由S观测到的对方的公网IP和端口号，然后给对方的地址发送信息。 两个客户端只有在NAT允许内网主机对内网其他主机发起UDP会话的时候才能正常通信，我们把这种情况称之为”回环传输“(lookback translation)，因为从内部 到达NAT的数据会被“回送”到内网中而不是转发到外网。例如，当A发送一个UDP数据包给B的公网地址时，数据包最初有源IP地址和端口地址10.0.0.1:1234和 目的地址155.99.25.11:62001，NAT收到包后，将其转换为源155.99.25.11:62000（A的公网地址）和目的10.1.1.3:1234，然后再转发给B。即便NAT支持 回环传输，这种转换和转发在此情况下也是没必要的，且有可能会增加A与B的对话延时和加重NAT的负担。</p><p>对于这个情况，优化方案是很直观的。当A和B最初通过S交换地址信息时，他们应该包含自身的IP地址和端口号（从自己看），同时也包含从服务器看的自己的 地址和端口号。然后客户端同时开始从对方已知的两个的地址中同时开始互相发送数据，并使用第一个成功通信的地址作为对方地址。如果两个客户端在同一个 NAT后，发送到对方内网地址的数据最有可能先到达，从而可以建立一条不经过NAT的通信链路；如果两个客户端在不同的NAT之后，发送给对方内网地址的数据包 根本就到达不了对方，但仍然可以通过公网地址来建立通路。值得一提的是，虽然这些数据包通过某种方式验证，但是在不同NAT的情况下完全有可能会导致A往B 发送的信息发送到其他A内网网段中无关的结点上去的。</p><blockquote><p>端点在多级NAT之后</p></blockquote><p>在一些拓朴结构中，可能会存在多级NAT设备，在这种情况下，如果没有关于拓朴的具体信息， 两个Peer要建立“最优”的P2P链接是不可能的，下面来说为什么。以下图为例：</p><pre><code>                            Server S                        18.181.0.31:1234                               |                               |                             NAT X                     A-S 155.99.25.11:62000                     B-S 155.99.25.11:62001                               |                               |        +----------------------+----------------------+        |                                             |      NAT A                                         NAT B192.168.1.1:30000                             192.168.1.2:31000        |                                             |        |                                             |     Client A                                      Client B  10.0.0.1:1234                                 10.1.1.3:1234</code></pre><p>假设NAT X是一个网络提供商ISP部署的工业级NAT，其下子网共用一个公网地址155.99.25.11，NAT A和NAT B分别是其下不同用户的网关部署的NAT。只有服务器S 和NAT X有全局的路由地址。Client A在NAT A的子网中，同时Client B在NAT B的子网中，每经过一级NAT都要进行一次网络地址转换。</p><p>现在假设A和B打算建立直接P2P链接，用一般的方法（通过Server S来打洞）自然是没问题的，那能不能优化呢？一种想当然的优化办法是A直接把信息发送给NAT B的 内网地址192.168.1.2:31000，且B通过NAT B把信息发送给A的路由地址192.168.1.1:30000，不幸的是，A和B都没有办法得知这两个目的地址，因为S只看见了客户端 ‵全局‵地址155.99.25.11。退一步说，即便A和B通过某种方法得知了那些地址，我们也无法保证他们是可用的。因为ISP分配的子网地址可能和NAT A B分配的子网地址 域相冲突。因此客户端没有其他选择，只能使用S来进行打洞并进行回环传输。</p><blockquote><p>固定端口绑定</p></blockquote><p>UDP打洞技术有一个主要的条件：只有当两个NAT都是Cone NAT（或者非NAT的防火墙）时才能工作。因为其维持了一个给定的（内网IP，内网UDP）二元组 和（公网IP， 公网UDP）二元组固定的端口绑定，只要该UDP端口还在使用中，就不会变化。如果像对称NAT一样，给每个新会话分配一个新的公网端口，就 会导致UDP应用程序无法使用跟外部端点已经打通了的通信链路。由于Cone NAT是当今最广泛使用的，尽管有一小部分的对称NAT是不支持打洞的，UDP打洞 技术也还是被广泛采纳应用。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>一般的网络编程，都是客户端比服务端要难，因为要处理与服务器的通信同时还要处理来自用户的事件；对于P2P客户端来说更是如此，因为P2P客户端不止作 为客户端，同时也作为对等连接的服务器端。这里的大体思路是，输入命令传输给服务器之后，接收来自服务器的反馈，并执行相应代码。例如A想要与B建立 通信链路，先给服务器发送punch命令以及给B发送数据，服务器接到命令后给B发送punch_requst信息以及A的端点信息，B收到之后向A发送数据打通通路，然 后A与B就可以进行P2P通信了。经测试，打通通路后即便把服务器关闭，A与B也能正常通信。</p><p>一个UDP打洞的例子见 <a href="https://github.com/pannzh/P2P-Over-MiddleBoxes-Demo" target="_blank" rel="noopener">P2P-Over-MiddleBoxes-Demo</a></p><h2 id="UPDATE-2016-04-06"><a href="#UPDATE-2016-04-06" class="headerlink" title="UPDATE 2016-04-06"></a>UPDATE 2016-04-06</h2><p>关于TCP打洞，有一点需要提的是，因为TCP是基于连接的，所以任何未经连接而发送的数据都会被丢弃，这导致在recv的时候是无法直接从peer端读取数据。 其实这对UDP也一样，如果对UDP的socket进行了connect，其也会忽略连接之外的数据，详见connect(2)。</p><p>所以，如果我们要进行TCP打洞，通常需要重用本地的endpoint来发起新的TCP连接，这样才能将已经打开的NAT利用起来。具体来说，则是要设置socket的 SO_REUSEADDR或SO_REUSEPORT属性，根据系统不同，其实现也不尽一致。一般来说，TCP打洞的步骤如下：</p><ul><li>A 发送 SYN 到 B （出口地址，下同），从而创建NAT A的一组映射</li><li>B 发送 SYN 到 A， 创建NAT B的一组映射</li><li>根据时序不同，两个SYN中有一个会被对方的NAT丢弃，另一个成功通过NAT</li><li>通过NAT的SYN报文被其中一方收到，即返回SYNACK， 完成握手</li><li>至此，TCP的打洞成功，获得一个不依赖于服务器的链接</li></ul><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>在<a href="https://zhuanlan.zhihu.com/p/26796476" target="_blank" rel="noopener">知乎</a>上发现的好文，感觉是看过最浅显易懂的P2P原理文章，希望这样的好文能继续传播，感谢原作者授权。</p><p>这篇文章来自<a href="https://www.cnblogs.com/pannengzhi/" target="_blank" rel="noopener">有价值炮灰</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="研发日志" scheme="https://blog.gfkui.com/categories/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="UDP打洞" scheme="https://blog.gfkui.com/tags/UDP%E6%89%93%E6%B4%9E/"/>
    
      <category term="P2P" scheme="https://blog.gfkui.com/tags/P2P/"/>
    
      <category term="内网穿透" scheme="https://blog.gfkui.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>实现抓取HTTPS握手时证书的客户端</title>
    <link href="https://blog.gfkui.com/2019/06/14/%E5%AE%9E%E7%8E%B0%E6%8A%93%E5%8F%96HTTPS%E6%8F%A1%E6%89%8B%E6%97%B6%E8%AF%81%E4%B9%A6%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://blog.gfkui.com/2019/06/14/实现抓取HTTPS握手时证书的客户端/</id>
    <published>2019-06-13T17:55:31.000Z</published>
    <updated>2020-11-22T08:05:54.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于一些很神奇的原因，我们需要用PHP实现从指定的IP获取HTTPS握手时的证书信息，其实在实现这个客户端之前有两种可行的方法。</p><ul><li><a href="https://stackoverflow.com/questions/3081042/how-to-get-ssl-certificate-info-with-curl-in-php" target="_blank" rel="noopener">使用PHP的CURL获取证书</a></li><li><a href="https://stackoverflow.com/questions/7885785/using-openssl-to-get-the-certificate-from-a-server" target="_blank" rel="noopener">使用<code>openssl</code>自带的客户端获取证书</a></li></ul><p>大概是脸黑的原因吧，这两种方法在这里放弃了，由于我们的线上服务器的<code>CURL</code>的版本过低，导致第一种方法无法实现，而直接升级的风险不可控，所以第一种方案就下马了。而第二种方案需要在线上服务器开启PHP的<code>exec</code>等危险函数，所以第二种方案也夭折了。最终只能自己动手实现PHP获取证书的轮子了，顺便填补下这方面的空白。</p><h2 id="获取HTTPS通信握手信息"><a href="#获取HTTPS通信握手信息" class="headerlink" title="获取HTTPS通信握手信息"></a>获取HTTPS通信握手信息</h2><p>此处需要获取<code>HTTPS</code>握手的信息，才能模拟握手请求获取证书。当然这里可以去阅读<code>RFC</code>获取详细的<code>HTTPS</code>握手协议，为了节省时间，这里使用网卡抓包神器<code>WireShark</code>来获取<code>HTTPS</code>握手信息。</p><p><code>WireShark</code>准备就绪之后，使用<code>CURL</code>命令直接获取证书，看看这几个包的交互到底发生了什么。具体抓包结果<a href="https://github.com/woodyxiong/Swoole-Cert-Capture/blob/master/data/sina.pcapng" target="_blank" rel="noopener">此处下载</a>。</p><p><img src="https://tencentcdn.gfkui.cn/19/6/18/%E5%A4%A7%E4%BD%93%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%9C.jpg" alt="大体抓包结果"></p><p>这张图可以看到一共互相交互了11个包，大致的交互过程以及原理可以阅读<a href="https://blog.gfkui.com/2018/03/30/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90https/">使用wireshark分析https</a>。</p><p>我们详细来看<code>Client Hello</code>包具体干了什么。<br><img src="https://tencentcdn.gfkui.cn/19/6/18/client%20hello.jpg" alt="Client Hello"></p><p>此包首先生成随机数，大概是以供之后的<code>DH算法</code>生成<code>对称秘钥</code>，并且将自己支持的<code>加密算法</code>、需要访问的域名等信息发送给<code>Server</code>端。</p><p>为了实现可以自由获取任何域名的证书，我们将<code>ww1.sinaimg.cn</code>替换成其他的域名，并且将包的长度进行了适当的更改，以供解包不会发生错误。发现这样简单的更改域名确实是可以抓到不同域名的证书。</p><p>接下来我们继续分析……</p><p><img src="https://tencentcdn.gfkui.cn/19/6/18/server%20hello%20done.jpg" alt="Server Hello Done"></p><p>上图显示<code>Server</code>端在接收<code>Client Hello</code>之后联系发送了4个包，而这4个包竟然需要拼在一起才能看到全貌。这4个包一共发送了一下4个信息：</p><ul><li>Server Hello</li><li>Certificate</li><li>Server Key Exchange</li><li>Server Hello Done</li></ul><p>以上4个信息只有<code>Certificate</code>信息才是最重要的，而按照<code>HTTPS</code>交互的报文头可以分辨出某一段中对应的是哪种信息。</p><p><img src="https://tencentcdn.gfkui.cn/19/6/18/%E6%8F%A1%E6%89%8B%E4%BF%A1%E6%81%AF%E5%88%86%E4%BF%A1%E6%81%AF%E5%9B%BE%E7%A4%BA.jpg" alt="分信息包图示"></p><p>获取了<code>HTTPS</code>握手信息，紧接着就是使用代码落地实现获取证书了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>实现TCP/IP客户端</p></blockquote><p> 首先引入眼帘的是<code>PHP</code>自带的<code>socket</code>，尽管经常听说被吐槽，但是毕竟是<code>PHP</code>的亲儿子，不试一试怎么行？</p><p> 网上找<code>PHP</code>的<code>socket</code>代码一找一大堆，而且也是可用的。但是放在生产环境，这些函数都是被禁用的，开起来比较繁琐。紧接着我想用另外的线程或者进程来控制<code>socket</code>的通信时长,因为在<code>TCP</code>建连之后，无法控制客户端<code>send</code>以及<code>recv</code>的时长，但是开启<code>PHP</code>多线程和多进程异常麻烦，完全不推荐使用。接着就是使用大名鼎鼎的<code>Swoole</code>插件了。</p><p> chua!chua!chua!之后，一个<code>Swoole</code>的<code>TCP</code>的<code>socket</code>客户端就搭建好了。</p><blockquote><p>搭建<code>Swoole</code></p></blockquote><p> 由于<code>Swoole</code>是只能在<code>Linux/Mac</code>下使用的，那么<code>Windows</code>电脑如何使用<code>Swoole</code>？</p><p> 当然是使用<code>Docker</code>呀，<code>Docker</code>真是个好东西，无论什么环境都可以超级快速的搭建，只要装上<code>Docker</code>就可以快速搭建任何复杂的环境并且编排出一个完整的工程，并且可以在本机上起多个项目。你敢相信部署一个项目，仅仅需要一个<code>docker-compose.yml</code>文件就可以搞定吗？这软件简直太棒了！</p><p> 本项目使用了<code>PHP7.2</code>+<code>Swoole4.3.1</code>具体的<code>Dockerfile</code>在<a href="https://github.com/woodyxiong/Swoole-Cert-Capture/blob/master/Test/dockerfile" target="_blank" rel="noopener">此处</a>，当然我更推荐你到<a href="https://hub.docker.com/r/woodyxiong/php7.2-swoole" target="_blank" rel="noopener"><code>Docker hub</code></a>直接拉取我的镜像。</p><p> 在<code>PhpStorm</code>更是对<code>Docker</code>非常支持，这里可以指定<code>PHP</code>的解释器为<code>Dockerfile</code>中的。</p><p> <img src="https://tencentcdn.gfkui.cn/19/7/3/phpstorm-docker.png" alt="phpstorm中配置Docker中的php"></p><p>操作完成后，只要在<code>PhpStorm</code>中运行<code>PHP</code>就是<code>Dockerfile</code>中装了<code>Swoole</code>的<code>PHP</code>。</p><blockquote><p>autoload自动引入程序</p></blockquote><p><code>PHP</code>在运行的时候使用了一个新的类，会使用自动加载机制引入<code>PHP</code>文件，但是这个自动加载机制一般需要人为设置如何引入，详见<a href="https://www.php.net/manual/zh/function.spl-autoload-register.php" target="_blank" rel="noopener">spl_autoload_register</a></p><p>这个小问题竟然困扰了我特别长的时间，因为一开始我写了<code>spl_autoload_register</code>程序，但是只能对本<code>PHP</code>文件生效，一旦跨到了别的<code>PHP</code>文件就无法进行自动引入。参考之前写的<a href="https://github.com/woodyxiong/TinyPHP/blob/master/TinyPHP/Library/Tiny/Tiny.class.php" target="_blank" rel="noopener">TinyPHP</a>发现一般都是用的静态函数，而这样就可以保证其他地方可以调用成功，而最后的写法在<a href="https://github.com/woodyxiong/Swoole-Cert-Capture/blob/master/CertCaptureTest.php" target="_blank" rel="noopener">CertCaptureTest.php</a>中，这样就可以变成谁使用，就用谁的<code>spl_autoload_register</code>。</p><blockquote><p>实现解析<code>TCP</code>包的方式</p></blockquote><p>由<code>WireShark</code>分析可知，每个包的请求内容是树状结构，所以做了个类似树状结构的类来对节点进行解析，解析类在<a href="https://github.com/woodyxiong/Swoole-Cert-Capture/tree/master/HandshakeNode" target="_blank" rel="noopener">这里</a>，程序在获取包<code>TCP</code>包的时候会解码包的内容并指向到不同的节点进行解析，而最终的证书节点在<a href="https://github.com/woodyxiong/Swoole-Cert-Capture/blob/master/HandshakeNode/CertificatesNode.php" target="_blank" rel="noopener">此处</a>。</p><blockquote><p><code>Swoole</code>中的协程</p></blockquote><p>由于像监听的这种程序，容易发生超时的情况，所以需要另一个进程或者线程来进行处理定时，一旦发生超时，立马终止程序。而在<code>Swoole</code>中可以使用一种类似<code>Go</code>语言中的<strong>协程</strong>的东西，简单的来说，他可以一个用户线程中自动切换任务，比如说我开一个协程进行一个监听超时的死循环的任务，而另一个任务时作为客户端获取服务器的证书内容，当其中任意一个任务阻塞，程序可以全自动的切换到另一个任务。而作为我程序的一部分，一旦获取证书的客户端发生阻塞，一直在监听服务端发来的数据，此时协程会切换到一个超时检测的循环中，一旦发现超时了，则立刻终止程序。具体的超时检测和客户端放在<a href="https://github.com/woodyxiong/Swoole-Cert-Capture/blob/master/CertCapture.php" target="_blank" rel="noopener">Swoole-Cert-Capture/CertCapture.php:39</a>。</p><p>另外值得注意的是，<code>Swoole</code>的官方文档真的太晦涩了，并且界面和搜索功能不是特别友好，可能这就是不好推广的原因吧，虽然听说程序写的很牛逼，但是希望开源软件对开发者友好些，这样也易于传播。希望以后的我也能写出如此牛逼的程序。-_-||</p><h2 id="添加Composer"><a href="#添加Composer" class="headerlink" title="添加Composer"></a>添加<code>Composer</code></h2><p>这是我第一个真正的可以使用的<code>PHP</code>开源项目，当然希望能正规一点哈哈哈，为了这个竟然还上了<a href="https://github.com/woodyxiong/Swoole-Cert-Capture/blob/master/LICENSE" target="_blank" rel="noopener">MIT开源协议</a>这样做的目的是搞的好像真的有人来用样的哈哈哈。</p><p>打包成<code>Composer</code>前提是你装上<a href="https://getcomposer.org/" target="_blank" rel="noopener"><code>Composer</code>程序</a>，之后只需要在项目所在的路径输入以下命令，然后跟着指示填写即可生成<code>Composer</code>包。</p><pre><code>composer init</code></pre><p>既然你想传到<a href="https://Packagist.org" target="_blank" rel="noopener">Packagist</a>上，你的项目总要是开源的放在<a href="https://github.com" target="_blank" rel="noopener">github</a>吧，随即可以在<a href="https://Packagist.org/packages/submit" target="_blank" rel="noopener">Packagist提交页面</a>填入项目地址，即可在[Packagist]生成对应的代码包。你们可以进入我的<a href="https://Packagist.org/packages/woodyxiong/swoole-cert-capture" target="_blank" rel="noopener">Packagist项目</a>，顺便点个关注打赏订阅哈哈哈。</p><p><img src="https://tencentcdn.gfkui.cn/19/7/3/packagist.jpg" alt="Packagist"></p><h2 id="添加简单的CI-CD构建"><a href="#添加简单的CI-CD构建" class="headerlink" title="添加简单的CI/CD构建"></a>添加简单的<code>CI/CD</code>构建</h2><p>这个步骤也是有些坎坷，我准备放到另一篇文章，欢迎关注。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="研发日志" scheme="https://blog.gfkui.com/categories/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="TCP/IP" scheme="https://blog.gfkui.com/tags/TCP-IP/"/>
    
      <category term="Docker" scheme="https://blog.gfkui.com/tags/Docker/"/>
    
      <category term="HTTPS" scheme="https://blog.gfkui.com/tags/HTTPS/"/>
    
      <category term="证书" scheme="https://blog.gfkui.com/tags/%E8%AF%81%E4%B9%A6/"/>
    
      <category term="PhpStorm" scheme="https://blog.gfkui.com/tags/PhpStorm/"/>
    
      <category term="Swoole" scheme="https://blog.gfkui.com/tags/Swoole/"/>
    
      <category term="Composer" scheme="https://blog.gfkui.com/tags/Composer/"/>
    
      <category term="Packagist" scheme="https://blog.gfkui.com/tags/Packagist/"/>
    
  </entry>
  
  <entry>
    <title>Jetbrain软件的一些常用功能总结</title>
    <link href="https://blog.gfkui.com/2019/05/19/Jetbrain%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.gfkui.com/2019/05/19/Jetbrain软件的一些常用功能总结/</id>
    <published>2019-05-19T09:05:08.000Z</published>
    <updated>2020-11-22T08:05:54.297Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jetbrain软件的一些常用功能总结"><a href="#Jetbrain软件的一些常用功能总结" class="headerlink" title="Jetbrain软件的一些常用功能总结"></a>Jetbrain软件的一些常用功能总结</h1><p>使用PhpStorm进行搬砖快到一年了，今天闲来无事看看phpstorm的一些功能，感觉不看真的会后悔一辈子，太多太多好用的快捷键和功能了</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><ul><li><code>ctrl</code> + <code>/</code> 什么?你竟然不知道这样注释?</li><li><code>ctrl</code> + <code>enter</code> 在行中进行向下换行</li><li><code>ctrl</code> + <code>l</code> 选中本行</li><li><code>ctrl</code> + <code>[]</code> 选中一些行进行缩进</li><li><code>ctrl</code> + <code>j</code> 下一行退格到本行，选中多行则缩成一行</li><li><code>ctrl</code> + <code>shift</code> + <code>l</code> 代码格式化</li><li><code>ctrl</code> + <code>shift</code> + <code>↑↓</code> 单行代码向上替换位置</li><li><code>ctrl</code> + <code>shift</code> + <code>v</code> 查看复制板的历史</li><li><code>ctrl</code> + <code>shift</code>+<code>enter</code> 在行中进行向上换行 当选中函数的时候，将函数移到下个函数后；当选中代码的时候，将代码向上移动</li><li><code>ctrl</code> + <code>alt</code> + <code>z</code> 选中行则此行恢复到上一个commit，否则恢复整个文件到上一个commit</li><li><code>alt</code> + <code>t</code> 用for/foreach/try…catch等进行包裹</li><li><code>alt</code> + <code>l</code> 不断扩大搜索范围(从变量到行到函数到类)</li><li><code>shift</code> + <code>F6</code> 更换变量名、函数名等</li><li><code>ctrl</code> + <code>k</code> 进入到高级模式</li><li><ul><li><code>ctrl</code> + <code>u</code> 将选中的字符/行变成大写或小写</li></ul></li></ul><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><ul><li><code>ctrl</code> + <code>q</code> 查看注释，不但可以看到自己的注释，还可以看到PHP函数的注释</li><li><code>ctrl</code> + <code>r</code> 查看本文件的函数结构</li><li><code>ctrl</code> + <code>shift</code> + <code>F12</code> 打开资源管理器</li><li><code>alt</code> + <code>←→</code> 切换代码标签页</li><li><code>ctrl</code> + <code>shift</code> + <code>c</code> 复制绝对路径</li><li><code>ctrl</code> + <code>shift</code> + <code>alt</code> + <code>c</code>复制相对路径</li><li><code>shift</code> + <code>F1</code> 查看光标选中的php函数的文档，直接跳转到php.net</li></ul><h4 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h4><ul><li><code>ctrl</code> + <code>d</code> 向后选择一样的单词，常用于批量修改变量</li><li><code>ctrl</code> + <code>B</code> 或 <code>鼠标中键</code> 或  找到变量或函数的定义(鼠标党福利)</li><li><code>alt</code> + <code>↑↓</code> 切换函数</li><li><code>F2</code> 查看下一个出错的地方</li></ul><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><ul><li><code>ctrl</code> + <code>p</code> 按照文件名搜索(巨好用)</li><li><code>ctrl</code> + <code>f</code> 文本搜索</li><li><code>ctrl</code> + <code>n</code> 按照类名进行搜索</li><li><code>ctrl</code> + <code>g</code> 跳转到指定的行数</li><li><code>ctrl</code> + <code>h</code> 替换文本</li><li><code>ctrl</code> + <code>shift</code> + <code>f</code> 全局搜索文本</li><li><code>双击shift</code> 搜索文件、文本等内容</li><li><code>ctrl</code> + <code>e</code> 最近打开的文件<br>+</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><code>ctrl</code> + <code>shift</code> + <code>t</code> 打开/关闭Terminal</li></ul><h4 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h4><ul><li><code>ctrl</code> + <code>k</code></li><li><ul><li><code>ctrl</code> + <code>c</code> git commit</li></ul></li><li><ul><li><code>ctrl</code> + <code>p</code> git push</li></ul></li><li><ul><li><code>ctrl</code> + <code>b</code> git checkout <branch></branch></li></ul></li><li><ul><li><code>ctrl</code> + <code>f</code> git fetch</li></ul></li><li><ul><li><code>ctrl</code> + <code>r</code> git rebase <branch></branch></li></ul></li></ul><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>phpstorm结合xdebug来进行断点调试超级方便，以下介绍phpstorm调试大法的操作</p><h4 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><code>shift</code>+ <code>F10</code> 以release模式运行，无法进行debug</li><li><code>alt</code>+ <code>F10</code> 以release模式运行，无法进行debug</li><li><code>shift</code>+ <code>F9</code> 以debug模式运行</li><li><code>alt</code>+ <code>F5</code> 以debug模式运行</li><li><code>F7</code> 进入函数</li><li><code>F8</code> 下一行</li><li><code>shift</code> + <code>F8</code> 跳出函数</li><li><code>F9</code> 继续运行</li><li><code>ctrl</code> + <code>shift</code> + <code>F8</code> View Breakpoints<br>+</li></ul><h4 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h4><p>在watches窗口可以将你希望看到的变量过滤并展示出来，并且可以写表达式将复杂变量展示</p><p><code>alt</code> + <code>F9</code> 可以光标指到哪里断点断在哪里，实现指哪断哪的功能</p><blockquote><p>如果在一个for循环中，我希望在第100次断住，怎么操作？</p></blockquote><p>如果在一处打断点，然后一直用鼠标一直点击运行，这样效率很低。更好的方法是点击<code>View Breakpoints</code>然后再<code>condition</code>中填入条件即可，例如<code>$i==100</code></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><blockquote><p>Database Tool 数据库操作神器</p></blockquote><p>感觉是可以媲美<code>Navicat</code>的操作数据库软件了，应该是<code>JetBrains</code>公司的<code>DataGrip</code>软件的缩小版，功能完全够用。尤其是<code>Run Script</code>的功能不会像<code>Navicat</code>的一样中途中断。<code>sql</code>语句的自动补全功能也比<code>navicat</code>的功能好用。</p><ul><li><code>F5</code> 在选中的时候或不选中的时候运行<code>sql</code>语句</li><li><code>Ctrl</code> + <code>N</code> 在设置了数据库的连接之后，直接输入数据库的名称即可进入console的界面</li></ul><blockquote><p>HTTP Client</p></blockquote><p>差不多是PhpStorm里面内置的PostMan了，支持轻量的http访问。但是感觉功能还是差了挺多的，还不能模拟服务端，也没有import url的功能，暂时不建议使用。</p><blockquote><p>Analyse Xdebug Profile</p></blockquote><p>根据<code>XDebug</code>插件产生的<code>profile</code>性能分析日志，对代码进行性能分析。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><blockquote><p>CodeGlance</p></blockquote><p>跟sublime text 一样的minimap</p><blockquote><p>Translation 翻译</p></blockquote><ul><li><code>ctrl</code> + <code>shift</code> + <code>o</code> 打开翻译界面</li><li><code>ctrl</code> + <code>shift</code> + <code>y</code> 翻译所选字符串</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://phpstorm.tips/" target="_blank" rel="noopener">PhpStorm Tips</a></p><p><a href="https://www.cnblogs.com/mclaoliu/archive/2018/05/04/8992522.html" target="_blank" rel="noopener">PhpStorm的几款必要插件</a></p><p><a href="https://github.com/woodyxiong/idea-sublime-keymap" target="_blank" rel="noopener">我的快捷键配置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="研发日志" scheme="https://blog.gfkui.com/categories/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="phpstorm" scheme="https://blog.gfkui.com/tags/phpstorm/"/>
    
      <category term="小技能" scheme="https://blog.gfkui.com/tags/%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
      <category term="体验" scheme="https://blog.gfkui.com/tags/%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>一句话了解设计模式</title>
    <link href="https://blog.gfkui.com/2019/03/27/%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%BA%86%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.gfkui.com/2019/03/27/一句话了解设计模式/</id>
    <published>2019-03-27T14:52:44.000Z</published>
    <updated>2020-11-22T08:05:54.304Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前认为能够实现功能即可，但是真正在应用中，随着代码的演变，后期代码的可维护性越来越差。例如改一处而动全身，大大增加了代码的出错隐患；主流程代码混入了奇奇怪怪的逻辑，导致代码晦涩难懂。而使用了设计模式之后，在代码演变时尽量都是增加函数或者类，降低了很多安全隐患，也减少了不必要的工作量。使用了合适的设计模式，绝对会让你事半功倍。</p><p>需要理解这么多的设计模式也不是一件容易的事情，我将第一次看设计模式的体会尽量用一句话体现出来，这样更加突出了其独特的设计风格，在者在需要使用的时候返回来查一些模式也比较容易查到。由于我也是第一次研究设计模式，按照自己理解得出的，且水平有限，可能跟别处会有出入。如有不同意见，欢迎留言。</p><h2 id="设计模式的7大基本原则"><a href="#设计模式的7大基本原则" class="headerlink" title="设计模式的7大基本原则"></a>设计模式的7大基本原则</h2><p>此7大基本原则用来描述一种软件的设计方式，用于量化设计模式的好坏。相比于“好用、牛逼、屌的一笔”等形容词，对设计有了更具体的描述。根据网上的说法，分成6种和7种基本原则，一般是多出了<code>单一职责原则</code>。我认为设计模式里面很多种是互相穿插，有些重复的，所以到底几种并不重要，而重要的是对其进行理解，并用到实际搬砖中。(ps 为了更愉悦地吹逼，我觉得多了解几种还是挺不错的)</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>对扩展开放，对修改关闭。在增加新功能的时候，增加类和函数即可，无需改造之前的类，这点在软件设计时非常重要。<strong>策略模式</strong></p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>子类可以继承父类被进行调用，只要父类存在的时候，一定可以替换成子类。这是<code>开闭原则</code>的步骤，正是因为继承，才能实现新功能来的时候继承就好。</p><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a><a href="https://juejin.im/post/5b7427b9518825613d38974b" target="_blank" rel="noopener">依赖倒置原则</a></h3><p>设计和实现要依赖于抽象而非具体，当类之间互相依赖的时候，尽量用set方法将实例注入进去，而上层调用底层的抽象函数。这样可以很好地支持开闭原则。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a><a href="https://juejin.im/post/5b7e4d31f265da43223c3043" target="_blank" rel="noopener">接口隔离原则</a></h3><p>子类都有的方法，用抽象类继承；子类不一定有的，用接口实现。<a href="https://www.lovelucy.info/abstract-class-vs-interface.html" target="_blank" rel="noopener">门的例子</a></p><h3 id="迪米特原则-最少知道原则"><a href="#迪米特原则-最少知道原则" class="headerlink" title="迪米特原则 | 最少知道原则"></a><a href="https://juejin.im/post/5b865bb7f265da437e4d8a96" target="_blank" rel="noopener">迪米特原则 | 最少知道原则</a></h3><p>外界无需知道的，使用private；上层只需要知道中间层，中间层只需要知道底层。</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a><a href="https://juejin.im/post/5b6d25ece51d455d68261ca0" target="_blank" rel="noopener">单一职责原则</a></h3><p>一个类，只干这个类该做的事情；服务员是服务员，厨师是厨师。</p><h2 id="具体到所有设计模式"><a href="#具体到所有设计模式" class="headerlink" title="具体到所有设计模式"></a>具体到所有设计模式</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p><a href="http://www.runoob.com/design-pattern/factory-pattern.html" target="_blank" rel="noopener"><strong>简单工厂模式</strong></a></p><p>工厂类通过传入的参数来生成对应的类，非常简单，但是有很多if语句来判断参数。</p><p><a href="http://www.runoob.com/design-pattern/abstract-factory-pattern.html" target="_blank" rel="noopener"><strong>抽象工厂模式</strong></a></p><p>当工厂类有很多个的时候，比如<code>图形工厂</code>和<code>颜色工厂</code>，可以将工厂继续抽象，用一个总工厂来生成<code>图形工厂</code>和<code>颜色工厂</code>，最后再有<code>图形工厂</code>和<code>颜色工厂</code>生产产品。</p><p><a href="http://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener"><strong>单例模式</strong></a></p><p>如果类只需被实例化一次，就将他放在static里面，并且开一个static方法将其送出去。值得注意的是，为了保证线程安全，不能同时被new两次，所以将同步锁加在new的时候。如果在加在类的时候实例化，则是<code>饿汉模式</code>；若是第一次调用的时候new，则为<code>懒汉模式</code>。</p><p><a href="http://www.runoob.com/design-pattern/builder-pattern.html" target="_blank" rel="noopener"><strong>建造者模式</strong></a></p><p>类似套餐的情况，底层的东西基本不变，但是组合在一起经常变化；底层统一继承一个商品，外面造一个套餐类，保存一个List来存储底层不变的东西，这样就可以自由组合多种<code>套餐</code>。</p><p><a href="http://www.runoob.com/design-pattern/prototype-pattern.html" target="_blank" rel="noopener"><strong>原型模式</strong></a></p><p>当初始化一个类需要消耗大量资源的时候，将一个实例化保存到一个地方。如果之后需要继续实例化这个类的话，可以用<code>clone()</code>(java和php都有这个函数)将之前的实例化拷贝出来。值得注意的是，浅拷贝只是拷贝了引用，而没有真正去拷贝；而深拷贝是所有都拷贝。<a href="https://itopic.org/php-clone.html" target="_blank" rel="noopener">php浅拷贝和深拷贝</a></p><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p><a href="http://www.jasongj.com/design_pattern/adapter/" target="_blank" rel="noopener"><strong>适配器模式</strong></a></p><p>例如一个app需要调用摄像头，但是摄像头是不同公司的，有索尼、佳能等，每个公司提供的sdk都不一样，主要是函数名不一样。这时候我们可以在sdk上继续封装一层适配器层，这样无需更改sdk代码就可以实现函数名的统一。</p><p><a href="http://www.jasongj.com/design_pattern/bridge/" target="_blank" rel="noopener"><strong>桥接模式</strong></a></p><p>在类的构造函数或是set方法将一些子属性传进去，以保证类的多样性防止<code>类爆炸</code>。</p><p><a href="http://www.runoob.com/design-pattern/filter-pattern.html" target="_blank" rel="noopener"><strong>过滤器模式</strong></a></p><p>这种模式将各种过滤的方法抽象化并解耦出来，然后使用一些简单的<code>or</code>和<code>and</code>等逻辑简单组合形成多样化的过滤组合模式。</p><p><a href="http://www.runoob.com/design-pattern/composite-pattern.html" target="_blank" rel="noopener"><strong>组合模式</strong></a></p><p>这个设计模式有点像观察者模式，与观察者不同的是，这个模式的结构是树状，并且是可以传递的。例如公司老板告诉各个部门主管我们公司要破产啦，然后各个部门主管告诉每个人咱们公司要破产了。这个消息传递的机制就是组合模式，怎么感觉名字和这个设计模式的原理匹配不上。</p><p><a href="https://zh.wikipedia.org/wiki/修饰模式" target="_blank" rel="noopener"><strong>装饰器模式</strong></a></p><p>感觉这个设计模式有点难理解，初步感觉是给某个类递归地附加几种平行的属性。防止互相继承导致<code>类爆炸</code>。(效果如同桥接模式，但是实现方法不一样)</p><p><a href="https://blog.csdn.net/carson_ho/article/details/54910625" target="_blank" rel="noopener"><strong>外观模式</strong></a></p><p>咋一眼看去感觉是个非常傻屌的设计模式，像是将很多类放在一个中心类中，然后for循环进行批量操作，有点像观察者模式，不过这个相对来说灵活些，因为子类可以不一样，但是写会更复杂些。</p><p><a href="http://www.runoob.com/design-pattern/flyweight-pattern.html" target="_blank" rel="noopener"><strong>享元模式</strong></a></p><p>一般结合工厂模式，类似单例模式，减少类的数量。主要内部是有个hashMap之类的结构存入“单例实体”。</p><p><a href="http://www.runoob.com/design-pattern/proxy-pattern.html" target="_blank" rel="noopener"><strong>代理模式</strong></a></p><p>私认为<code>代理模式</code>和<code>适配器模式</code>的差异不大，都是一个中间层对底层处理逻辑。适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口（来自runoob）。反正用的时候随心所欲，无需分这么细。</p><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p><a href="http://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html" target="_blank" rel="noopener"><strong>责任链模式</strong></a></p><p>有点像链表一样，有着传递的感觉，一般来说是将同一个变量传给A类的函数，A发现此操作无法处理，则传给B，B接着传给C，直到碰到可以处理的类。常用于审批流程，科室的任务先传给处级，处级操作完交到局里，局里操作完到部里，直到可以操作为止。</p><p><a href="http://www.runoob.com/design-pattern/command-pattern.html" target="_blank" rel="noopener"><strong>命令模式</strong></a></p><p><code>命令模式</code>大概就是先人执行命令行得出的灵感吧，接触到最深的例子就是在gui中，每个按钮都是几条命令行叠加的结果。而<code>命令模式</code>将这种方式解耦，拆分成三个类，即<code>命令角色(gui)</code>、<code>中间接受者</code>(命令行的业务操作在这里，可以进行执行回退等功能)、<code>实际命令</code>(这些类是一个一个的命令)，接收者通过调用这些一个一个的命名来对<code>命令角色</code>做出相应的相应。这样将一个类一步一步的解耦。</p><p><a href="https://www.runoob.com/design-pattern/interpreter-pattern.html" target="_blank" rel="noopener"><strong>解释器模式</strong></a></p><p>通常用于<code>编译器</code>或<code>运算表达式</code>，<code>解释器模式</code>指的是将一个句子拆分成语法树，底层一步一步将结果汇总，最后将结果输出，有点像<code>组合模式</code>。</p><p><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener"><strong>迭代器模式</strong></a></p><p>一般用于自定义的容器，类似<code>list</code>、<code>map</code>等数据结构，调用方无需关心底层容器是如何将数据吐出来，只管用即可。而底层就是用了迭代器，像链表一样可以一直向下访问，以致于上层可以用<code>for</code>、<code>while</code>等语句直接访问数据。</p><p><a href="https://www.runoob.com/design-pattern/mediator-pattern.html" target="_blank" rel="noopener"><strong>中介者模式</strong></a></p><p>类之间的<code>网状</code>调用关系通过一个中间类变成<code>星状</code>调用关系，大家只关心如何跟中介进行交互，降低类与类之间的耦合。例如<code>MVC</code>模式的<code>controller</code>控制器就是一个中介，<code>model</code>与<code>view</code>层通过<code>controller</code>来进行相互交互。</p><p><a href="https://www.runoob.com/design-pattern/memento-pattern.html" target="_blank" rel="noopener"><strong>备忘录模式</strong></a></p><p>常用于<code>通关存档</code>、<code>ctrl-z</code>、<code>浏览器的后退</code>等场景，主要功能是将当时的数据保存下来，有可能是保存成类，也可能是序列化，在需要的时候可以反向序列化等方式回到当时的场景，常常配合<code>原型模式</code>。</p><p><a href="http://www.jasongj.com/design_pattern/observer/" target="_blank" rel="noopener"><strong>观察者模式</strong></a></p><p>个人理解此种设计模式也是<code>发布/订阅模式</code>。一个很经典的例子就是，一个tcp服务器端和很多个tcp客户端，一个场景是服务器端全局广播信息给所有客户端，这个时候客户端就是观察者。实现方式是，每次客户端与服务端建立连接之后，就在服务器端注册这个socket，也就是服务器端有个list，每次有客户端连接就加一个。当需要全局发送广播的时候，服务端遍历list将信息发送给客户端，这尼玛就是观察者模式。</p><p><a href="http://www.runoob.com/design-pattern/state-pattern.html" target="_blank" rel="noopener"><strong>状态模式</strong></a></p><p>状态模式比较注重的是获取<strong>当前状态</strong>，并对于当前状态去干此状态的事情。相比于一堆if……else……的逻辑判断，此模式是根据一个其成员的状态去运行的。最后，我觉得著名的<strong>状态机</strong>就是<strong>状态模式</strong>+<strong>责任链模式</strong>的结果，这样才能根据状态不停地将任务传递下去。</p><p><a href="https://blog.csdn.net/qiumengchen12/article/details/44923139" target="_blank" rel="noopener"><strong>空对象模式</strong></a></p><p>例如工厂模式，传入的值如果在工厂没有对应的类，所以工厂返回的是<code>null</code>，如果后面的程序没有继续判断是否是Null，则上层程序按照这个实例进行操作的话，就会报空指针异常的错误。为了程序的健壮性，<code>空对空模式</code>就是将本是返回的<code>null</code>值返回成一个专门的空实例，以致于上层程序如果调用的话，返回的函数都是有值的，但是会提示是空的。我认为这个模式可以提升一部分健壮性，但是不一定适合，如果内部太过复杂，可能很难模拟掉它的返回，所以要因地制宜。<a href="https://blog.csdn.net/ljyljyok/article/details/77449287" target="_blank" rel="noopener">一些参考</a></p><p><a href="http://www.jasongj.com/design_pattern/strategy/" target="_blank" rel="noopener"><strong>策略模式</strong></a></p><p>在一个流程下来，中间的某个部分可能有很多种方式去实现，例如将数里所有学生拿出来，并且将学生按照成绩排序，拿到最终的学生数组。中间的成绩排序有很多种方式，例如快排、冒泡、桶排等，这些排序可以拿出来专门的类，在上层可随意指定哪种排序方式。此设计模式经常可以运用的到，在php中，配合call_user_function使用最佳。</p><p><a href="https://www.runoob.com/design-pattern/template-pattern.html" target="_blank" rel="noopener"><strong>模板模式</strong></a></p><p>这种妈卖批模式竟然有名字，咋一看就是抽象类将骨架定好，然后子类去继承然后实现每个步骤的方法。这应该就是最简单最简单的类继承了。</p><p><a href="https://www.jianshu.com/p/cd17bae4e949" target="_blank" rel="noopener"><strong>访问者模式</strong></a></p><p>此种设计模式感觉看得比较懵逼。有一个容器类，装着各个元素，各个元素都有<code>accept</code>函数，专门用来接收访问者，然后将自己传给访问者，调用的时候将访问者放进容器中遍历一遍即可。类与类之间互相嵌套，耦合程度挺高的。是不是很懵逼，懵逼就对了，太复杂的设计模式可能并不是太好，所以这个放在最后一个行为模式可能就是这个原因吧。</p><h3 id="J2EE-模式"><a href="#J2EE-模式" class="headerlink" title="J2EE 模式"></a>J2EE 模式</h3><p><a href="https://www.runoob.com/design-pattern/mvc-pattern.html" target="_blank" rel="noopener"><strong>MVC模式</strong></a></p><p>最经常用的一个模式，M指model层,V指view层,C指controller层。<code>controller</code>层夹在<code>view</code>层和<code>model</code>层的中间，他们的交互全部是通过中间层<code>controller</code>进行交互的。这种模式经常用于网站的<code>MVC</code>框架中，实现了界面与数据库模型的解耦。</p><p><a href="https://www.kancloud.cn/wizardforcel/w3school-design-patterns/91349" target="_blank" rel="noopener"><strong>业务代表模式</strong></a></p><p>这个模式没怎么看懂，感觉网上资料比较少，都是抄来抄去的。感觉底层就是一个工厂，然后有几层中间层，知道原理，但是不知道实现啥，为什么这样做。。。zZ</p><p><a href="https://www.runoob.com/design-pattern/composite-entity-pattern.html" target="_blank" rel="noopener"><strong>组合实体模式</strong></a></p><p>组合模式的运用</p><p><a href="https://www.runoob.com/design-pattern/data-access-object-pattern.html" target="_blank" rel="noopener"><strong>数据访问对象模式</strong></a></p><p>类似开发中的Controller-&gt;Service-&gt;Entity-&gt;Model，Model是一个一个的实体，Entity是多个实体进行操作的一层，对上层提供对Model层的方法，而Service为纯业务层。</p><p><a href="https://www.runoob.com/design-pattern/front-controller-pattern.html" target="_blank" rel="noopener"><strong>前端控制器模式</strong></a></p><p>将所有请求收敛，通过一个调度器，这个调度器可以做日志收集、权限校验等功能，然后再发散到各个策略中去，最后生成视图层View</p><p><a href="https://www.runoob.com/design-pattern/intercepting-filter-pattern.html" target="_blank" rel="noopener"><strong>拦截过滤器模式</strong></a></p><p>就拿上一个<code>前端控制器模式</code>来讲吧，中间的调度器就可以做成一层一层的，并且是可以自由添加减少的，而一层一层的拦截器存储在一个列表中，这样就可以自由的添加减少拦截器</p><p><a href="https://www.runoob.com/design-pattern/service-locator-pattern.html" target="_blank" rel="noopener"><strong>服务定位器模式</strong></a></p><p>理解到是首先去取缓存，若缓存有就拿缓存，没有的话实例化一个再存入缓存。感觉上最好搭配<code>原型模式</code>，在需要的时候进行深拷贝以取到不同的实例</p><p><a href="https://www.runoob.com/design-pattern/transfer-object-pattern.html" target="_blank" rel="noopener"><strong>传输对象模式</strong></a></p><p>将一个类型的多个实例打包成一个大的实例，实例里面大概率又是列表的数据结构，然后将这个大实例传给接收方，这样的做法是减少网络传输的中间断开的的概率，而进行打包传输</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="研发日志" scheme="https://blog.gfkui.com/categories/%E7%A0%94%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="玄学" scheme="https://blog.gfkui.com/tags/%E7%8E%84%E5%AD%A6/"/>
    
      <category term="设计模式" scheme="https://blog.gfkui.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>复杂业务的一些思考</title>
    <link href="https://blog.gfkui.com/2019/03/18/%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://blog.gfkui.com/2019/03/18/复杂业务的一些思考/</id>
    <published>2019-03-18T13:24:17.000Z</published>
    <updated>2020-11-22T08:05:54.310Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 在实际工作的时候，一个非常正常的逻辑，因为业务方一些很神奇的需求，不需对一些通用的</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>奇异人生2第二章节.Life is strange Episode 2</title>
    <link href="https://blog.gfkui.com/2019/02/16/%E5%A5%87%E5%BC%82%E4%BA%BA%E7%94%9F/%E5%A5%87%E5%BC%82%E4%BA%BA%E7%94%9F2%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%8A%82.Life%20is%20strange%20Episode%202/"/>
    <id>https://blog.gfkui.com/2019/02/16/奇异人生/奇异人生2第二章节.Life is strange Episode 2/</id>
    <published>2019-02-16T14:30:41.000Z</published>
    <updated>2020-11-22T08:43:12.973Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-nDckrcPb" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":0,"mutex":true,"theme":"#e6d0b2","listmaxheight":"513px","volume":"0.2","music":[{"title":"Look for Sympathy","author":"Luciano Rossi","url":"https://tencentcdn.gfkui.cn/19/2/16/Luciano%20Rossi%2CGlenn%20Herweijer%2CBen%20Sumner%20-%20Look%20for%20Sympathy.mp3","pic":"https://tencentcdn.gfkui.cn/19/2/16/%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E5%9B%BE.jpg"},{"title":"I found a way","author":"First Aid Kit","url":"https://tencentcdn.gfkui.cn/19/2/16/First%20Aid%20Kit%20-%20I%20Found%20a%20Way.mp3","pic":"https://tencentcdn.gfkui.cn/19/2/16/%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E5%9B%BE.jpg"},{"title":"Red","author":"Mr. Wolf","url":"https://tencentcdn.gfkui.cn/19/2/16/Mt.%20Wolf%20-%20Red.mp3","pic":"https://tencentcdn.gfkui.cn/19/2/16/%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E5%9B%BE.jpg"},{"title":"Death With Dignity","author":"Sufjan Stevens","url":"https://tencentcdn.gfkui.cn/19/2/16/Death%20With%20Dignity.m4a","pic":"https://tencentcdn.gfkui.cn/19/2/16/%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E5%9B%BE.jpg"},{"title":"Lisztomania","author":"Phoenix","url":"https://tencentcdn.gfkui.cn/19/2/16/Lisztomania.m4a","pic":"https://tencentcdn.gfkui.cn/19/2/16/%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E5%9B%BE.jpg"}]};  options.element = document.getElementById("aplayer-nDckrcPb");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E6%A0%87%E9%A2%98.jpg" alt="期待已久的奇异人生2-2"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继 <a href="https://blog.gfkui.cn/2018/10/07/奇异人生2第一章节.Life is strange Episode 1/" target="_blank" rel="noopener">奇异人生2第一章节的体验</a> 发布两个月，盼星星盼月亮，第二章节的部分终于在2019年1月24日发布，然而那时即将进入春节，正在忙碌地筹备春节前的故障预防工作，所以只有在年后才有机会体验第二章节的内容。为了这个游戏，特意将手柄等设备带回了家中。</p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E7%94%B5%E8%A7%86%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%8E%A9.jpg" alt="电脑连电视玩，贼爽"></p><p>在大年初二的晚上，家里只剩我和旺财（一条傻狗），将电脑、音箱、电视等设备搭好。一切准备就绪后，手拿着手柄，坐在沙发上，旺财躺在身上，脚架在火炉上（没错就是火炉！！！）激动人心的游戏体验就这样开始了，真的舒服到爆炸~~~</p><p>省外的同学估计没看过烤火炉，图如下</p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E7%83%A4%E7%81%AB%E7%82%89.jpg" alt="烤火炉"></p><h2 id="剧情介绍"><a href="#剧情介绍" class="headerlink" title="剧情介绍"></a>剧情介绍</h2><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E8%B6%85%E7%BA%A7%E7%8B%BC%E5%B4%BD.jpg" alt="超级狼崽"></p><p>继上次的逃亡生涯之后，两兄弟化身为狼兄弟。在风景秀丽的小河边，两兄弟玩耍的十分开心，弟弟跟着哥哥的指导渐渐将超能力发挥到极致，并且在一个不知名的小木屋度过了一个开心的夜晚。</p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E6%B2%B3%E8%BE%B9.jpg" alt="河边"></p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E4%B8%BB%E9%A2%98%E5%9B%BE.jpg" alt="练习"></p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E9%9B%AA%E6%99%AF.jpg" alt="雪人"></p><p>然而这样的平静在第二天早上马上就被打破，弟弟在第一章节领养的小狗<code>香菇</code>竟然被一个豹子叼走了。作为哥哥，弟弟在对着豹子放大招将其杀死的时候，我选择了阻止，因为狗狗死了一切都无法挽回，何必屠杀生灵呢；但是看看怀中的旺财，如果我家旺财这样被欺负，估计砍人的心都有了吧。。。尼玛也太虐了吧，两人只能将小狗就地掩埋，随着背景音乐的增强，一股凄凉油然而生。</p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E5%9F%8B%E8%91%AC%E7%8B%97%E7%8B%97.jpg" alt="埋葬狗狗"></p><p>紧接着超级狼崽们就来到了外公外婆的家里，外公外婆其实知道兄弟俩是逃亡而来的，毕竟是骨肉亲情，最终还是收留了可怜的兄弟俩。</p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E5%A4%96%E5%85%AC.jpg" alt="外公"></p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E5%A4%96%E5%A9%86.jpg" alt="外婆"></p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E4%B8%89%E4%BA%BA.jpg" alt="三人"></p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E7%BE%8E%E5%9B%BD%E6%A2%A6.jpg" alt="外公外婆家的美国梦"></p><p>在外公外婆家期间，兄弟们在玩耍的时候遇见了一个开朗的男孩子，男孩的院子里有个树屋，然而男孩在爬上树屋的时候不慎从高空摔落。说时迟那时快，弟弟马上使出超能力将男孩在空中悬浮一下缓冲跌落，而男孩以为自己有超能力可以浮在空中，所以在之后的剧情里给自己取名 <strong>超能队长</strong>。没错！！！这就是 <strong>超能队长游戏</strong> 与奇异人生2源自同一个公司出品，但是只有一个章节，到从树屋跌落为止！！！这不就是给奇异人生2的铺垫嘛。</p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E5%88%9D%E8%AF%86%E8%B6%85%E8%83%BD%E9%98%9F%E9%95%BF.jpg" alt="初识超能队长"></p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E8%B6%85%E8%83%BD%E9%98%9F%E9%95%BF%E7%8E%A9%E5%85%B7.jpg" alt="超人队长+玩具"></p><p>兄弟两人和超能队长的感情日渐深厚，弟弟和超能队长玩着怪兽游戏，而且一起去买圣诞树为即将到来的圣诞节做准备。期间哥哥在市场碰到朋克小姐姐，一曲<code>I found a way</code>主题曲在她口中清唱，哇，，，这游戏如果没有音乐就是没有灵魂的游戏。</p><p>30分钟的时候清唱</p><iframe src="//player.bilibili.com/player.html?aid=41643845&cid=73182333&page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="400"> </iframe><p>快乐的时光总是短暂的，就像游戏也马上走上了这一章的终点了；因为两兄弟在外公外婆家呆的时间太长，最终还是被发现了。在一个安静的清晨，警察突然到访。</p><p><img src="https://tencentcdn.gfkui.cn/19/2/16/%E8%AD%A6%E5%AF%9F%E5%88%B0%E8%AE%BF.jpg" alt="警察到访"></p><p>两兄弟在看到这一幕之后，只能慌慌张张地马上从后院逃跑上山。然后，，，我的第二章发生了以下的一幕。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/6Gb9c42cIh8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>而有的竟然让 <strong>超能队长</strong> 被警车撞</p><iframe width="560" height="315" src="https://www.youtube.com/embed/E29DnKVF15A?start=10538" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>当然，还有好的结局，一切圆满，<strong>超能队长</strong> 给狼兄弟指了一条明路，当丹尼尔和克里斯双手十字交叉的时候，我的心都要化了。为什么我就玩不出这种好结局啊，可能是第一部为了弟弟我在商店偷东西，第二部和弟弟在小树林中放肆地骂人。。。可能这就是罪有应得吧哈哈哈，每个人玩出的结局都不一样，这就是我喜欢这个游戏的很大一部分原因。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Bgc-QKxV6uQ?start=11278" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>接着，他们踏上了去往远方的火车。第三部，待续。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/E29DnKVF15A?start=10782" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="游戏体验" scheme="https://blog.gfkui.com/categories/%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C/"/>
    
    
      <category term="体验" scheme="https://blog.gfkui.com/tags/%E4%BD%93%E9%AA%8C/"/>
    
      <category term="游戏" scheme="https://blog.gfkui.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="Life Is Strange" scheme="https://blog.gfkui.com/tags/Life-Is-Strange/"/>
    
  </entry>
  
</feed>
